<?xml version="1.0" encoding="utf-8"?>
<CodeplexIssue xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Id>18896</Id>
  <Title>Cannot call VBA methods with parameters</Title>
  <DescriptionHtml xml:space="preserve"><![CDATA[See my description (and solution) in this post
<a href="http://netoffice.codeplex.com/discussions/402559" rel="nofollow">http://netoffice.codeplex.com/discussions/402559</a>]]></DescriptionHtml>
  <Status>Active</Status>
  <Type>Issue</Type>
  <Impact>Low</Impact>
  <Comments>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[thanks for reporting this issue and your research.the problem is related to the parameters as far i'm understand.as hotfix is it possible for you to use a call like this


var result = app.Run("addinFileName.ppam!TestAddin", new object[] {new object[]{"par1", "par2"}});


??? 

Sebastian]]></BodyHtml>
      <CreatedAt>2012-11-10T02:32:26.0000000+01:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>buehlert</Author>
      <BodyHtml xml:space="preserve"><![CDATA[No, sorry, your suggestion doesn't work unfortunately.I will get again the inner exception {"Application.Run : Invalid request. Sub or function not defined."}


Just for you to know how the parameters should be passed, here are the differences:
<ol>
<li>Right now the Invoker.cs - MethodReturn gets a paramsArray object which looks like this: paramsArray[2] : paramsArray[0] = "addinFileName.ppam!TestAddin" paramsArray[1] = object[1] -> object[0] = "par1"
</li><li>After my workaround posted in the forum the array looks like this: paramsArray[2] : paramsArray[0] = "addinFileName.ppam!TestAddin" paramsArray[1] = "par1"
</li></ol>
Thanks and best regards,Thomas]]></BodyHtml>
      <CreatedAt>2012-11-14T15:27:53.0000000+01:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[god damn it :( i change the implementation now. 

Sebastian]]></BodyHtml>
      <CreatedAt>2012-11-14T23:32:47.0000000+01:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>buehlert</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Hi Sebastian 

Thanks a lot for a fantastic release 1.6.0!Unfortunately the macro related issue I recognized has not been fixed yet.Is there any chance of a working update?


Thanks and best regards,Thomas]]></BodyHtml>
      <CreatedAt>2013-09-12T09:58:47.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>buehlert</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Here is some code to test this easily: 

Create test.ppam with following subs/functions:<code>Public Sub TestAddin() MsgBox ("Hello")End Sub


Public Function TestAddin2() As String TestAddin2 = "Hello "End Function


Public Function TestAddin3(name As String) As String TestAddin3 = "Hello " & nameEnd Function</code>


Now, create a C# Test method like:<code>var powerApplication = new Application();powerApplication.Visible = MsoTriState.msoTrue;var addin = powerApplication.AddIns.Add("D:\test\test.ppam");addin.Loaded = MsoTriState.msoTrue;


//1. Macro, no parameters, no return value powerApplication.Run(addin.Name + "!TestAddin");


//2. Macro, no parameters, with return valuevar res = powerApplication.Run(addin.Name + "!TestAddin2");Debug.WriteLine(res.ToString());


//2. Macro, with parameters, with return valuevar res2 = powerApplication.Run(addin.Name + "!TestAddin3", new Object[] { "test" });Debug.WriteLine(res2.ToString());


powerApplication.Quit();powerApplication.Dispose();</code> 

TestAddin -> works, message box will be displayedTestAddin2 -> works, "Hello" is returnedTestAddin3 -> crashes -> it says "Application.Run : Invalid request. Sub or function not defined"]]></BodyHtml>
      <CreatedAt>2013-09-12T10:05:37.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>buehlert</Author>
      <BodyHtml xml:space="preserve"><![CDATA[This is how it works, please use it as a suggestion how to solve this bug: 

The class "NetOffice.Invoker.cs" contains the following method called for running macros:


``` public static object MethodReturn(COMObject comObject, string name, object[] paramsArray) { try { if (comObject.IsDisposed) throw new InvalidComObjectException();
<pre><code>            if ((Settings.EnableSafeMode) && (!comObject.EntityIsAvailable(name, SupportEntityType.Method)))                    throw new EntityNotSupportedException(string.Format("Method {0} is not available.", name));

            object returnValue;             if (name == "Run" && paramsArray != null && paramsArray.Length == 2 && paramsArray[0].GetType() == typeof(string) && paramsArray[1].GetType() == typeof(object[]))              {                   var newParas = new List { paramsArray[0] };                 newParas.AddRange((object[])paramsArray[1]);

                returnValue = comObject.InstanceType.InvokeMember(name, BindingFlags.InvokeMethod | BindingFlags.GetProperty, null,                comObject.UnderlyingObject, newParas.ToArray(), Settings.ThreadCulture);             }               else                {                   returnValue = comObject.InstanceType.InvokeMember(name, BindingFlags.InvokeMethod | BindingFlags.GetProperty, null, comObject.UnderlyingObject, paramsArray, Settings.ThreadCulture);               }                               return returnValue;            }            catch (Exception throwedException)            {                DebugConsole.WriteException(throwedException);                throw new System.Runtime.InteropServices.COMException(GetExceptionMessage(throwedException), throwedException);            }        }```</code></pre>]]></BodyHtml>
      <CreatedAt>2013-09-12T13:20:38.0000000+02:00</CreatedAt>
    </CodeplexComment>
  </Comments>
  <ReportedBy>buehlert</ReportedBy>
  <ReportedAt>2012-11-09T13:47:33.0000000+00:00</ReportedAt>
</CodeplexIssue>