{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 3,
    "Custom": "",
    "Description": "see discussion http://netoffice.codeplex.com/discussions/441304\n\nOn some systems the methods \n\n   Application.GetActiveInstance \n   Application.GetActiveInstances\n\nthrow an ArgumentException \"The object's type must be __ComObject...\" \n\n```\nThe object's type must be __ComObject or derived from __ComObject.\nParameter name: o System.ArgumentException System.ArgumentException: The object's type must be __ComObject or derived from __ComObject.\nParameter name: o\nat System.Runtime.InteropServices.Marshal.ReleaseComObject(Object o)\nat NetOffice.RunningObjectTable.GetActiveProxiesFromROT(String componentName, String className)\nat NetOffice.WordApi.Application.GetActiveInstances() \n```\n\nThe problem may occur with different Office Applications (Word / Access ) and different Plattforms (Windows 7 / Windows 8)\nOn one affected machine a com instance of type C4.CCC made this trouble. It seems it is related with ATI graphic cards.\n\n\nReason:\n\nThe objects of the RunningObjectTable are iterated, to compare the component and class name. The reference counter of objects which don't match is decremented by calling:\n\n```\n Marshal.ReleaseComObject(comInstance);\n```\n\nsee:\n\n```\nif (componentNameEqual && classNameEqual)\n   {\n                    Marshal.ReleaseComObject(bindInfo);\n                    return comInstance;\n   }\n   else\n   {\n                    componentNameEqual = ((_ballmersPlace + componentName).Equals(component, StringComparison.InvariantCultureIgnoreCase));\n                    if (componentNameEqual && classNameEqual)\n                    {\n                        Marshal.ReleaseComObject(bindInfo);\n                        return comInstance;\n                    }\n                    else\n                        Marshal.ReleaseComObject(comInstance); // <=== Exception thrown here\n    }\n```\n\nThe problem is, that although it is expected to retrieve COM-Instances some are not really COM-Types.\nfor which RelaseComObject can be called.\n\n\nSuggested solution:\n\nChecking the type of the COM-Instance before calling ReleaseComObject would solve this issue.\n\n```\nif (componentNameEqual && classNameEqual)\n                        {\n                            resultList.Add(comInstance);\n                        }\n                        else\n                        {\n                            componentNameEqual = ((_ballmersPlace + componentName).Equals(component, StringComparison.InvariantCultureIgnoreCase));\n                            if (componentNameEqual && classNameEqual)\n                            {\n                                resultList.Add(comInstance);\n                            }\n                            else\n                            {                                \n                                // In some strange scenarios we got an object\n                                // which was not a COM object\n                                if (comInstance.GetType().IsCOMObject)\n                                    Marshal.ReleaseComObject(comInstance);\n                            }\n                        }\n                    }\n```",
    "LastUpdatedDate": "2013-06-20T13:13:27.887-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "netoffice",
    "ReportedDate": "2013-05-08T06:41:57.897-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Application.GetActiveInstance throws ArgumentException \"The object's type must be __ComObject...\"",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 2,
    "Id": 19683
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "I'm attempting to look at all running instances of Excel and connect to one if it's formatted in the manner that I require.  The following code causes the same error as above:\r\n\r\nforeach (Excel.Application app in Excel.Application.GetActiveInstances())\r\n\r\n",
      "PostedDate": "2013-06-20T11:23:23.463-07:00",
      "Id": 203125
    },
    {
      "Message": "i create a new source state this weekend and fix the problem otherweise its easy for you to change this single line in the source code. i have no idea why this problem occurs, any instance from the ROT is a com proxy *scarywhich office version and operations system do you use?Sebastian",
      "PostedDate": "2013-06-20T12:26:31.243-07:00",
      "Id": 203126
    },
    {
      "Message": "I am using C# and Visual Studio 2010, Microsoft Office 2007, and Windows 7 Home Premium.  Perhaps there is another way to accomplish what I want to do?\r\n\r\nMy application starts Excel, writes header text to several spreadsheets, then writes data to Excel periodically.  If my applications closes and restarts, I want to connect to Excel IF it is my spreadsheet.  I want to be able to connect even if there are multiple instances of Excel that are running.  As such, I've written the following code:\r\n\r\n            try            {                foreach (Excel.Application app in Excel.Application.GetActiveInstances())                {                    xlApplication = app;                    if (xlApplication.Workbooks.Count >= 1)                    {                        xlWorkbook = xlApplication.Workbooks[1];                        if (xlWorkbook.Worksheets.Count >= 2)                        {                            if ((((Excel.Worksheet)xlWorkbook.Worksheets[1]).Name == \"Test Results\") &&                                (((Excel.Worksheet)xlWorkbook.Worksheets[2]).Name == \"Detailed Test Results\"))                            {                                bReturn = true;                                ExistingFile = true;\r\n\r\n                                // Activate the first worksheet by default.                                ((Excel.Worksheet)xlApplication.ActiveWorkbook.Sheets[1]).Activate();\r\n\r\n                                // Make sure Excel is visible and give the user control of Microsoft Excel's lifetime.                                xlApplication.Visible = true;                                xlApplication.UserControl = true;                                break;                             }                        }                    }\r\n\r\n                    if (!bReturn)                    {                        CleanupExcelInterop();                    }                }            }            catch (Exception ex)            {                CleanupExcelInterop();                Console.WriteLine(\"***** Excel Interop Exception \" + ((null != ex.InnerException) ? ex.InnerException.Message : ex.Message));            }\r\n\r\n            if (!bReturn)            {                CleanupExcelInterop();            }",
      "PostedDate": "2013-06-20T13:13:27.887-07:00",
      "Id": 203127
    }
  ]
}