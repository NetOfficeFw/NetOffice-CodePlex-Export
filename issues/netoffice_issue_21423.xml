<?xml version="1.0" encoding="utf-8"?>
<CodeplexIssue xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Id>21423</Id>
  <Title>Issue iterating through Range.Fields</Title>
  <DescriptionHtml xml:space="preserve"><![CDATA[When iterating through Range.Fields, after calling field.Update() (which may update the list of fields in Word), there's an issue with the iterator of fields. It throws a COMException saying "Object has been deleted".

The code with NetOffice:
<pre><code>// If ToArray is not called, then it throws the exception when iterating for the second time.
foreach (var field in storyRange.Fields.ToArray())
{
    try
    {
        // Throws an exception COMException ("Object has been deleted") the second time possibly because some fields have been deleted and the current field doesn't exist anymore in Word.
        field.Update();
    }
    catch (COMException)
    {
    }
}
</code></pre>
The code with the Microsoft Word Interop:
<pre><code>// With the Interop, the list of fields is updated on the fly. In my case, if I count the number of fields in the range, it starts at 41 fields for the first iteration, and then drops to 31 fields the second iteration.
foreach (var field in storyRange.Fields.Cast<Word.Field>()))
{
    // No exception is thrown.
    field.Update();
}
</code></pre>
I know it might trigger a bigger refactor, but it would be nice if those lists (not only the fields) could behave like the Interop.


If you need a repro project with a Word document, let me know.

Thanks.]]></DescriptionHtml>
  <Status>Active</Status>
  <Type>Unassigned</Type>
  <Impact>Unassigned</Impact>
  <Comments>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[of course, please send me your sample project to: public.sebastian.web.de to reproduce the problem.


(also) let me know about your op system version(32/64bit) and your office product/version(32/64bit) and NetOffice version.


its looks like i need also your office document (remove any private data, also in code, but make sure the problem still occurs)


*Sebastian]]></BodyHtml>
      <CreatedAt>2014-10-08T23:35:16.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Its an issue in the NO enumerator logic. 

After some tests i realize MS-Word reject existing field proxies after field.Update(). This occurs also in interop. The problem in NO is the enumerator get one more field proxy as expected(see below).I want fix this as fast as possible but if you need a change
 today you can modify the NO code at hand of course(just switch 2 code lines in 2 methods).


Location: Utils.cs (NetOffice.dll)Methods: IEnumerator GetProxyEnumeratorAsProperty(COMObject comObject) IEnumerator GetProxyEnumeratorAsMethod(COMObject comObject)


Wrong Code:COMObject returnClass = Factory.CreateObjectFromComProxy(enumerator, itemProxy);isMoveNextTrue = (bool)Invoker.MethodReturnWithoutSafeMode(enumerator, "MoveNext", null);yield return returnClass;


Correct Code:COMObject returnClass = Factory.CreateObjectFromComProxy(enumerator, itemProxy);yield return returnClass;isMoveNextTrue = (bool)Invoker.MethodReturnWithoutSafeMode(enumerator, "MoveNext", null);


*Sebastian]]></BodyHtml>
      <CreatedAt>2014-10-09T22:59:59.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>maboivin</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Alright, thanks for your prompt support.]]></BodyHtml>
      <CreatedAt>2014-10-09T23:18:28.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[NetOffice 1.7.1(RTM) is now available and resolve this issue. 

*happy coding]]></BodyHtml>
      <CreatedAt>2014-11-02T09:22:04.0000000+01:00</CreatedAt>
    </CodeplexComment>
  </Comments>
  <ReportedBy>maboivin</ReportedBy>
  <ReportedAt>2014-10-08T12:08:39.0000000+00:00</ReportedAt>
</CodeplexIssue>