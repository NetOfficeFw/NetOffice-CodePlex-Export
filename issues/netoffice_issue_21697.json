{
  "WorkItem": {
    "AffectedComponent": {
      "DisplayName": "",
      "Name": ""
    },
    "AssignedTo": "",
    "ClosedBy": "",
    "ClosedComment": "",
    "CommentCount": 4,
    "Custom": "",
    "Description": "When reading calendar appointments from Outlook, there's an option called \"IncludeRecurrences\" that should add all future recurrences to the list of items. For example: if I have a recurring appointment that happens every Wednesday, when my list of appointments return, I should see a future entries for my Wednesday appointment.\n\nThis works great using the Office.Interop, but when I switch my code to NetOffice, I receive an error message after I set IncludeRecurrences to true, and then try and Sort.  The Sort() method does not work correctly, and errors out saying \"Exception of type 'System.OutOfMemoryException' was thrown.\"\n\nHere is the stack trace:\n((System.Exception)((new System.Linq.SystemCore_EnumerableDebugView<object>(OutlookItems)).Items)).StackTrace at NetOffice.OutlookApi._Items.d__7.MoveNext() at NetOffice.OutlookApi._Items.d__0.MoveNext() at System.Linq.SystemCore_EnumerableDebugView`1.get_Items()\n\nWould it be possible to make this work similar to the Office.Interop?\n\nHere is my code:\n\n        public List<Appointment> GetAppointmentsInRange()\n        {\n            var result = new List<Appointment>();\n\n            Items OutlookItems = outlookCalendar.Items as Items;\n            OutlookItems.IncludeRecurrences = true;\n            OutlookItems.Sort(\"[Start]\");\n\n            if (OutlookItems != null)\n            {\n                DateTime min = DateTime.Now.AddDays(-1);\n                DateTime max = DateTime.Now.AddDays(+30);\n\n     string filter = \"[End] >= '\" + min + \"' AND [Start] < '\" + max + \"'\";\n\n                var filteredAppoinments = OutlookItems.Restrict(filter);\n                foreach (AppointmentItem ai in filteredAppoinments)\n                {\n                    result.Add(GetOutlookAppointment(ai));\n                }\n            }\n            return result;\n        }",
    "HtmlDescription": "When reading calendar appointments from Outlook, there's an option called &quot;IncludeRecurrences&quot; that should add all future recurrences to the list of items. For example: if I have a recurring appointment that happens every Wednesday, when my list of appointments return, I should see a future entries for my Wednesday appointment.<br />\n<br />\nThis works great using the Office.Interop, but when I switch my code to NetOffice, I receive an error message after I set IncludeRecurrences to true, and then try and Sort.  The Sort() method does not work correctly, and errors out saying &quot;Exception of type 'System.OutOfMemoryException' was thrown.&quot;<br />\n<br />\nHere is the stack trace:<br />\n((System.Exception)((new System.Linq.SystemCore_EnumerableDebugView&lt;object&gt;(OutlookItems)).Items)).StackTrace at NetOffice.OutlookApi._Items.d__7.MoveNext() at NetOffice.OutlookApi._Items.d__0.MoveNext() at System.Linq.SystemCore_EnumerableDebugView`1.get_Items()<br />\n<br />\nWould it be possible to make this work similar to the Office.Interop?<br />\n<br />\nHere is my code:<br />\n<pre><code>    public List&lt;Appointment&gt; GetAppointmentsInRange()\n    {\n        var result = new List&lt;Appointment&gt;();\n\n        Items OutlookItems = outlookCalendar.Items as Items;\n        OutlookItems.IncludeRecurrences = true;\n        OutlookItems.Sort(&quot;[Start]&quot;);\n\n        if (OutlookItems != null)\n        {\n            DateTime min = DateTime.Now.AddDays(-1);\n            DateTime max = DateTime.Now.AddDays(+30);\n\n string filter = &quot;[End] &gt;= '&quot; + min + &quot;' AND [Start] &lt; '&quot; + max + &quot;'&quot;;\n\n            var filteredAppoinments = OutlookItems.Restrict(filter);\n            foreach (AppointmentItem ai in filteredAppoinments)\n            {\n                result.Add(GetOutlookAppointment(ai));\n            }\n        }\n        return result;\n    }</code></pre>\n\n",
    "PlainDescription": "When reading calendar appointments from Outlook, there's an option called \"IncludeRecurrences\" that should add all future recurrences to the list of items. For example: if I have a recurring appointment that happens every Wednesday, when my list of appointments return, I should see a future entries for my Wednesday appointment.\n\nThis works great using the Office.Interop, but when I switch my code to NetOffice, I receive an error message after I set IncludeRecurrences to true, and then try and Sort.  The Sort() method does not work correctly, and errors out saying \"Exception of type 'System.OutOfMemoryException' was thrown.\"\n\nHere is the stack trace:\n((System.Exception)((new System.Linq.SystemCore_EnumerableDebugView<object>(OutlookItems)).Items)).StackTrace at NetOffice.OutlookApi._Items.d__7.MoveNext() at NetOffice.OutlookApi._Items.d__0.MoveNext() at System.Linq.SystemCore_EnumerableDebugView`1.get_Items()\n\nWould it be possible to make this work similar to the Office.Interop?\n\nHere is my code:\npublic List&lt;Appointment&gt; GetAppointmentsInRange()\n{\n    var result = new List&lt;Appointment&gt;();\n\n    Items OutlookItems = outlookCalendar.Items as Items;\n    OutlookItems.IncludeRecurrences = true;\n    OutlookItems.Sort(&quot;[Start]&quot;);\n\n    if (OutlookItems != null)\n    {\n        DateTime min = DateTime.Now.AddDays(-1);\n        DateTime max = DateTime.Now.AddDays(+30);\n\n\nstring filter = \"[End] >= '\" + min + \"' AND [Start] < '\" + max + \"'\";\n        var filteredAppoinments = OutlookItems.Restrict(filter);\n        foreach (AppointmentItem ai in filteredAppoinments)\n        {\n            result.Add(GetOutlookAppointment(ai));\n        }\n    }\n    return result;\n}\n\n\n",
    "LastUpdatedBy": "SebastianDotNet",
    "LastUpdatedDate": "2015-02-10T19:15:49.733+01:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "netoffice",
    "ReportedBy": "dgoodw01",
    "ReportedDate": "2015-01-29T17:52:43.253+01:00",
    "CanContactReportedByUser": false,
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "NetOffice.OutlookAPI.Items.Sort() is erroring with an Out of Memory exception.",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 21697,
    "HasUserVoted": false
  },
  "FileAttachments": [
    {
      "FileId": 1600205,
      "FileName": "Capture.PNG",
      "WorkItemId": 21697,
      "DownloadUrl": "https://www.codeplex.com/Download/AttachmentDownload.ashx?ProjectName=netoffice&WorkItemId=21697&FileAttachmentId=1600205"
    }
  ],
  "Comments": [
    {
      "Message": "Here is a screenshot of the error message in Visual Studio.",
      "PostedBy": "dgoodw01",
      "PostedDate": "2015-01-30T00:15:18.337+01:00",
      "WorkItemId": 21697,
      "Id": 203285
    },
    {
      "Message": "The Enumerator in Outlook.Items is a custom NetOffice enumerator.This is a special NO service for scenarios with a low amount of data.\r\n\r\nMicrosoft doesnt spend an enumerator here because the count of items(mails or whatever) was too big to handle this completly in local memory. (typical in an Exchange scenario)\r\n\r\nso you have to use the low level enumerator methods. (GetNext, etc.) and sort them at hand.\r\n\r\n*Sebastian\r\n\r\n",
      "PostedBy": "SebastianDotNet",
      "PostedDate": "2015-02-06T23:10:44.83+01:00",
      "WorkItemId": 21697,
      "Id": 203286
    },
    {
      "Message": "Sebastian,\r\n\r\nCould you give me an example of how to sort them at hand, using a low level enumerator? I can't seem to figure it out.  Any help you can provide is greatly appreciated.",
      "PostedBy": "dgoodw01",
      "PostedDate": "2015-02-07T06:06:32.757+01:00",
      "WorkItemId": 21697,
      "Id": 203287
    },
    {
      "Message": "this is the common way for example:(https://msdn.microsoft.com/en-us/en-us/library/office/ff860338.aspx)\r\n\r\nobject item = inboxFolder.Items.GetFirst();while (null != item){     item = inboxFolder.Items.GetNext();}\r\n\r\nnice to know, the NetOffice custom enumerator:[from NetOffice metadata]public class _Items{        //        // Zusammenfassung:        //     SupportByVersionAttribute Outlook, 9,10,11,12,14,15 This is a custom enumerator        //     from NetOffice        [CustomEnumerator]        public IEnumerator GetEnumerator();}\r\n\r\n*Sebastian",
      "PostedBy": "SebastianDotNet",
      "PostedDate": "2015-02-10T19:15:49.733+01:00",
      "WorkItemId": 21697,
      "Id": 203288
    }
  ],
  "CanDeleteWorkItem": true,
  "CanDeleteComments": true
}