<?xml version="1.0" encoding="utf-8"?>
<CodeplexIssue xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Id>22310</Id>
  <Title>Workbook.ExportAsFixedFormat followed by Workbook.Close crashes the Excel app but no exception is thrown</Title>
  <DescriptionHtml xml:space="preserve"><![CDATA[When calling Workbook.ExportAsFixedFormat to save an Excel workbook as PDF quickly followed by Workbook.Close, the Excel app crashes but no exception is thrown by NetOffice.


Here's the code to reproduce the issue:
<pre><code>var s = $@"C:\users\{Environment.UserName}\desktop\test.xlsx";
var d = $@"C:\users\{Environment.UserName}\desktop\test.pdf";

var app = new Application() { Visible = true };

try
{
    var wb = app.Workbooks.Open(s);
    wb.ExportAsFixedFormat(XlFixedFormatType.xlTypePDF, d, XlFixedFormatQuality.xlQualityMinimum, false, null, null, null, false);

    // 2. Adding the sleep for at least 16ms on my machine makes it succeed.
    //Thread.Sleep(20);

    // 1. It crashes on the following line.
    wb.Close(false);
    
    // 3. Note that calling Close on the COM object works and properly closes the workbook.
    //((dynamic)wb.UnderlyingObject).Close(false);
    
    Console.WriteLine("Done");
}
catch (Exception ex)
{
    ex.Dump();
}
finally
{
    app.Quit();
    app.Dispose();
}</code></pre>
Some more details.
<ol>
<li>On my machine, it crashes the Excel app when the code executes in 1.02s or less.
</li><li>On my machine (or on slower machines), it doesn't crash the Excel app when the code executes in 1.1s or more.
</li><li>Calling the Close method on the COM object itself doesn't crash the Excel app.
</li></ol>
I'm using NetOffice 1.7.3.0 with Office 2016 16.0.6741.2056 on Windows 10 Enterprise Anniversary Update, 64-bit. I used LINQPad to reproduce the scenario above.


I have uploaded the LINQPad query (if needed). The Excel file (test.xlsx) is a very simple workbook with "Hello World!" in the first cell.


UPDATE: 
It looks like in some cases, it still crashes the Excel app even when calling the Close method on the COM object itself. This could be due to the dynamics framework being a bit slower to execute...]]></DescriptionHtml>
  <Status>Proposed</Status>
  <Type>Unassigned</Type>
  <Impact>Unassigned</Impact>
  <Comments>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Please explain, Excel crashes himself or you got an exception? For the moment i follow the exception idea.

I need the exception details please. what kind of exception and any details or just an ex.ToString() or whatever you do in the Dump extension method.

One more interesting point is the value from 

int proxyCount = NetOffice.Core.Default.ProxyCount;
(if you use an addin, {$addinInstance].Factory.Settings.ProxyCount)

Your current Excel Version 32/64 Bit and Operating System 32/64 Bit CPU 32/64 Bit is also helpful to reproduce the problem.

BTW, you need to call Thread.Sleep(20);
Please try:
NetOffice.Settings.Default.MessageFilter.Enabled = true;

The message filter is a Microsoft feature to handle the problem that the RPC Server is currently busy.
It means wait for a while and try again automaticaly without xtra code. Netoffice spend a default implementation here.

(The test.xlsx is just an empty workbook, i didnt understand what i can help here)

*Sebastian]]></BodyHtml>
      <CreatedAt>2016-08-24T15:02:44.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>maboivin</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Sebastian, 
As I said, no exception is thrown. As I already said, I'm using NetOffice 1.7.3.0 with Office 2016 16.0.6741.2056 on Windows 10 Enterprise Anniversary Update, all 64-bit. My CPU is an Intel Core i7-5820K (more info at
<a href="http://ark.intel.com/products/82932/Intel-Core-i7-5820K-Processor-15M-Cache-up-to-3_60-GHz" rel="nofollow">
ark.intel.com</a>) and is also 64-bit. 

Calling NetOffice.Core.Default.ProxyCount just before Workbook.Close method returns 9.


Setting NetOffice.Settings.Default.MessageFilter.Enabled = true; has no effect and the Excel app still crashes.


When I say that the Excel app crashes, it crashes with the window Microsoft Excel has stepped working. I included the screenshot in attachment. There's no exception at all that is raised. The code executes fine, but the Excel app is crashed and not responding
 after the Workbook.Close method is called. 

The test.xlsx workbook is just the test workbook I'm using in my test. There's nothing to be done with it...]]></BodyHtml>
      <CreatedAt>2016-08-24T15:54:15.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[this is some kind of bad magic -.-

1) Thread.Sleep(20); fix the problem as well ?
2) any details in the event log ?
3) is your solution an addin or something else?
4) your code is running in some kind of worker thread?
5.) Can you try the following call instead?

object proxy = wb.UnderlyingObject;
proxy.GetType().InvokeMember("Close",
<pre><code>            System.Reflection.BindingFlags.InvokeMethod, 
            null, proxy, new object[] { false });
</code></pre>
it is a plain late binding call without any netoffice logic to pin point the problem.


*Sebastian]]></BodyHtml>
      <CreatedAt>2016-08-25T15:16:29.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>maboivin</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Sebastian,
1) Yes, it does fix the issue on my machine. The code seems to be executing too fast for Excel.

2) I have the following entry in the event viewer.
<pre><code>Log Name:      Application
Source:        Application Error
Date:          2016-08-25 9:34:46 AM
Event ID:      1000
Task Category: (100)
Level:         Error
Keywords:      Classic
User:          N/A
Computer:      maboivin-pc.xxx.local
Description:
Faulting application name: EXCEL.EXE, version: 16.0.6741.2063, time stamp: 0x579e3ad1
Faulting module name: EXCEL.EXE, version: 16.0.6741.2063, time stamp: 0x579e3ad1
Exception code: 0xc0000005
Fault offset: 0x000000000031ec99
Faulting process id: 0xa784
Faulting application start time: 0x01d1fed571561d63
Faulting application path: C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE
Faulting module path: C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE
Report Id: afddf70b-6ac8-11e6-9c0c-d0509936edec
Faulting package full name: 
Faulting package-relative application ID: 
Event Xml:
<Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event">
  <System>
    <Provider Name="Application Error" />
    <EventID Qualifiers="0">1000</EventID>
    <Level>2</Level>
    <Task>100</Task>
    <Keywords>0x80000000000000</Keywords>
    <TimeCreated SystemTime="2016-08-25T13:34:46.797178400Z" />
    <EventRecordID>5655</EventRecordID>
    <Channel>Application</Channel>
    <Computer>maboivin-pc.xxx.local</Computer>
    <Security />
  </System>
  <EventData>
    <Data>EXCEL.EXE</Data>
    <Data>16.0.6741.2063</Data>
    <Data>579e3ad1</Data>
    <Data>EXCEL.EXE</Data>
    <Data>16.0.6741.2063</Data>
    <Data>579e3ad1</Data>
    <Data>c0000005</Data>
    <Data>000000000031ec99</Data>
    <Data>a784</Data>
    <Data>01d1fed571561d63</Data>
    <Data>C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE</Data>
    <Data>C:\Program Files\Microsoft Office\Root\Office16\EXCEL.EXE</Data>
    <Data>afddf70b-6ac8-11e6-9c0c-d0509936edec</Data>
    <Data>
    </Data>
    <Data>
    </Data>
  </EventData>
</Event></code></pre>
3) No, it's a simple console app. In my case, I tested the scenario using LINQPad. I was able to reproduce it on 3 different machines so far.

4) No, it's running on the default thread.

5) Calling the Close method on the proxy has no effect on the result and the Excel app still crashes.

In the end, I don't think it's a NetOffice issue. It looks more like it's an Excel 2016 issue... I was able to reproduce the issue using only the Excel Interop that ships with VS2015. I might have to report this issue to the Office team directly. Do you have
 any contact in the Office team?]]></BodyHtml>
      <CreatedAt>2016-08-25T15:47:31.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[I have no contact to Microsoft (and i think they dont wont to fix it) 
When its possible please try another system with office 2016 because there is a lot of possible reasons for the crash, a third party addin, a faulty pdf printer driver and so on.

My theory why the dynamic call works is that the dynamic runtime system want fetch a lot of type informations at the first call before and this may need >=16ms in time - the delay you need to succeed.

Please try some other code instead instead of Close(false); may write some dumy text in a sheet and see how excel want handle that.

*Sebastian]]></BodyHtml>
      <CreatedAt>2016-08-25T22:05:47.0000000+02:00</CreatedAt>
    </CodeplexComment>
  </Comments>
  <ReportedBy>maboivin</ReportedBy>
  <ReportedAt>2016-08-23T18:43:31.0000000+00:00</ReportedAt>
</CodeplexIssue>