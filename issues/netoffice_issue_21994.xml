<?xml version="1.0" encoding="utf-8"?>
<CodeplexIssue xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Id>21994</Id>
  <Title>Memory leak using Excel workbook</Title>
  <DescriptionHtml xml:space="preserve"><![CDATA[Hi,
I'm having an issue with workbooks property in Excel.
What I'm trying to do is a loop on a same Excel application object:
<ol>
<li>open a workbook </li><li>read some data </li><li>close the workbook </li><li>dispose the workbook </li><li>loop until there is no file left
</li></ol>
But I can see in task manager that Excel memory is growing everytime I loop despite the dispose method. Is there a way to handle this (maybe I'm not using it the right way) or is that a bug?]]></DescriptionHtml>
  <Status>Proposed</Status>
  <Type>Unassigned</Type>
  <Impact>Unassigned</Impact>
  <Comments>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[its difficult to analyze without code example because i did not understand "loop until there is no file left".(btw: the NO proxy management was safe for all the years)


can i see some code for step 5 ? 

nice to know:in a standalone solution(not sure its yours) you can use the static NetOffice.Core.Default.ProxyCount property and ProxyCountChanged event for diagnostics. it shows you how many proxies currently open in your solution.


Sebastian]]></BodyHtml>
      <CreatedAt>2015-09-02T17:46:21.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>pasielsky</Author>
      <BodyHtml xml:space="preserve"><![CDATA[I'm just looping on files in a folder; my code is quite huge so basically it's just:// myClass// ...// private membersprivate netoffice.Excel _ExcelApplication; // initilized in constructor


// myMethod// ...Foreach (file in Directory){ Workbook MyWorkbook = _ExcelApplication.Workbooks.open(file); // Do some stuff in opened workbook to read cells values // ... // close file MyWorkbook.close(); MyWorkbook.dispose(); GC.Collect(); GC.WaitForPendingFinalizers();}


So it's working BUT as there are many files in my folder, Excel is growing in memory and when it is above 110k, opening a new file is really slow (at the end, it's more than 6 minutes to open a file).]]></BodyHtml>
      <CreatedAt>2015-09-03T10:07:55.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[You may didnt realize the Workbooks property/proxy from _ExcelApplication. (you call them -on the fly- and didnt dispose them)


I suggest you to use 

1)Dim books As Excel.Workbooks = _ExcelApplication.Workbooks....books.Dispose() 

or dispose all child proxies from _ExcelApplication instead at the end of foreach loop2) _ExcelApplication.DisposeChildInstances()


*let me know this helpsSebastian]]></BodyHtml>
      <CreatedAt>2015-09-03T10:27:53.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>pasielsky</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Wonderfull!DisposeChildInstances worked !My program run in a minute instead of 40 minutes yesterday: that's terrific!


thank you so much, you made my day!]]></BodyHtml>
      <CreatedAt>2015-09-03T10:38:38.0000000+02:00</CreatedAt>
    </CodeplexComment>
  </Comments>
  <ReportedBy>pasielsky</ReportedBy>
  <ReportedAt>2015-09-02T12:41:18.0000000+00:00</ReportedAt>
</CodeplexIssue>