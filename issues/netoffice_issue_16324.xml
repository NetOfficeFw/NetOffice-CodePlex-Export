<?xml version="1.0" encoding="utf-8"?>
<CodeplexIssue xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Id>16324</Id>
  <Title>Shape.Line and Shape.Fill throw exceptions in NetOffice</Title>
  <DescriptionHtml xml:space="preserve"><![CDATA[After adding a line to the worksheet with the Worksheet.Shapes.AddLine method, the .Line property of the returned Excel.Shape cannot be accessed. A LateBindingApi.Core.LateBindingApiException is thrown with the message that the LineFormat class is not
 found in LateBindingApi. When using the interop directly (Microsoft.Office.Interop.Excel instead of using NetOffice), we are able to access the .Line property of the returned Shape object.
 
 
using Excel = NetOffice.ExcelApi;
 
LateBindingApi.Core.Factory.Initialize();
Excel.Application XL = new Excel.Application(null, ExcelDnaUtil.Application); // We're using ExcelDna here
 
Excel.Worksheet ws = (Excel.Worksheet)XL.ActiveSheet;
Excel.Shape arrow = ws.Shapes.AddLine(288.0F, 218.5F, 592.0F, 218.5F); // Randomly add a line
Excel.LineFormat lf = arrow.Line; // Throws exception
 
// arrow.Line.DashStyle = (MsoLineDashStyle)2; // This throws an exception as we cannot access the .Line object
 
Exception:
System.Exception {LateBindingApi.Core.LateBindingApiException}
{"LineFormat class not found in LateBindingApi."}
 
 
We can get around this by accessing the ComObject directly:
 
dynamic proxy = arrow.UnderlyingObject;
proxy.Line.DashStyle = 2;
 
 
 
Also, when trying to access the Shape.Fill property, it is always set to null in NetOffice:
 
using Excel = NetOffice.ExcelApi;
 
LateBindingApi.Core.Factory.Initialize();
Excel.Application XL = new Excel.Application(null, ExcelDnaUtil.Application); // We're using ExcelDna here
 
dynamic comment = XL.ActiveSheet.Comments[1]; // Get the first comment on the current worksheet
try
{
comment.Shape.Fill.ForeColor.RGB = 255; // This throws an error as .Fill is null in NetOffice proxy object
}
catch
{
dynamic comment_interop = comment.UnderlyingObject; // We must set it directly thru the underlying proxy object
comment_interop.Shape.Fill.ForeColor.RGB = 255; // This works
}
 
Exception Thrown:
System.Exception {Microsoft.CSharp.RuntimeBinder.RuntimeBinderException}
{"Cannot perform runtime binding on a null reference"}]]></DescriptionHtml>
  <Status>Resolved</Status>
  <Type>Issue</Type>
  <Impact>High</Impact>
  <Comments>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[i do a test and have the same exception "class not found" 
give me few moments to see whats the problem.]]></BodyHtml>
      <CreatedAt>2011-08-02T11:58:40.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[temp update: 
LineFormat is defined in Excel and in Office 
the assembly try to convert the comproxy as Excel LineFormat(so defined in typelib) but the comproxy at runtime means he comes from Office.

i'm not sure in prev versions of excel the type comes from excel and now he comes from office.

currently my codegenerator can't handle this scenario i believe. this need a little bit more research :( but i think i can fix it in 1 day.]]></BodyHtml>
      <CreatedAt>2011-08-02T14:45:17.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[temp update: 
okay now i see 
Shape.Line means defined LineFormat in Office and not the defined LineFormat in Excel.

this is a very rare situation, 2 defined types with the same name and LineFormat Line means the other component type.

thats also the reason for Shape.Fill is null. Fill means the FillFormat in Office and not in Excel.

the result of wrong as cast is null. i do a fix now.]]></BodyHtml>
      <CreatedAt>2011-08-02T21:01:10.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[temp update: 
the bug is located in TLI API from Microsoft. 
the api makes possible to analyze a COM Type Library and the API says the specified objects are not external defined and thats wrong.

i will try to create a workarround...]]></BodyHtml>
      <CreatedAt>2011-08-02T22:56:42.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>crazyfool2100</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Wow, that is a rare situation. Thank you for shedding some light on the problem.


For now, the only workaround is to do something like this (for anyone that is interested):


dynamic arrow = worksheet.Shapes.AddLine((float)startx, (float)starty, (float)endx, (float)endy);

dynamic proxy = arrow.UnderlyingObject; // Get the underlying Shape object from NetOffice

dynamic line = proxy.Line; // Store this as we are creating a new "unmanaged" proxy object outside of NetOffice

dynamic fc = line.ForeColor; // Store this as well since we are creating a new proxy object

fc.RGB = 255; // Set the property 

Marshal.ReleaseComObject(fc); // We must release our proxy objects that aren't managed by NetOffice

Marshal.ReleaseComObject(line); 
//Marshal.ReleaseComObject(proxy); // Do NOT release the 'UnderlyingObject' provided by NetOffice as proxy count problems are encountered as NetOffice should dispose of this object for you, but you must release the other objects you create


Thanks Sebastian!!]]></BodyHtml>
      <CreatedAt>2011-08-03T06:00:22.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[i think i can find a way to check out the type is external defined or not without the bugy TLI API method.

i hope this evening.]]></BodyHtml>
      <CreatedAt>2011-08-03T16:29:44.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[its done. 
a new release with fixed issue comes this week,]]></BodyHtml>
      <CreatedAt>2011-08-08T15:20:24.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[the best workarround for your current code today is: 

Excel.Shape shape = comment.Shape; 
object proxy = LateBindingApi.Core.Invoker.PropertyGet(shape, "Fill"); 
Excel.FillFormat fill = new Excel.FillFormat(shape, proxy); 

//now you have a serious Fill object managed by NetOffice]]></BodyHtml>
      <CreatedAt>2011-08-08T15:29:52.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[finally i have it, the problem occurs if two interfaces in different components has the same interface id.

this is not allowed in COM but Microsoft do that (i dont know why) i create a small analyzer

to see what happen. the result is as follows. 


LineFormat 
FillFormat 
Adjustments 
CalloutFormat 
ColorFormat 
ShapeNode 
PictureFormat 
ShadowFormat 
TextEffectFormat 
ThreeDFormat 
DiagramNodes 
DiagramNode 
DiagramNodeChildren 
TextFrame2 


all these types are defined in office and excel with the same interface id and also same properties and methods(thats the reason for it works early bind without problems)

nice to know: these scary effect is only affected to excel and office. 
as outcome you have problems with these types in NetOffice, null or exception while using.

now, i have a workaround and in next release(NetOffice 1.2), the problem is resolved.]]></BodyHtml>
      <CreatedAt>2011-08-10T22:38:27.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>crazyfool2100</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Amazing! 

Great work Sebastian! I hope this discovery and fix helps people out.]]></BodyHtml>
      <CreatedAt>2011-08-13T12:21:00.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[an updated release tag is now available. issue closed. 
*have a nice day]]></BodyHtml>
      <CreatedAt>2011-08-14T03:40:55.0000000+02:00</CreatedAt>
    </CodeplexComment>
  </Comments>
  <ReportedBy>crazyfool2100</ReportedBy>
  <ReportedAt>2011-08-02T03:25:03.0000000+00:00</ReportedAt>
</CodeplexIssue>