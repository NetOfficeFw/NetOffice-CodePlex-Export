{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 7,
    "Custom": "",
    "Description": "I have module level variables in my form. Like range and Excel application. When I hide the form and show another form, the other form calls back to the hidden form and executes some code. So if I try and do anything with the the Excel objects it gives me the following error:\n \n \n\t\tError Code \t-2147467259\tInteger\n \n \n+\t\tInnerException\t{\"Method 'System.__ComObject.Visible' not found.\"}\tSystem.Exception\n \n\t\tStackTrace\t\"   at NetOffice.Invoker.PropertySet(COMObject comObject, String name, Object[] value)     at NetOffice.ExcelApi._Application.set_Visible(Boolean value)     at ExcelForms.FReportGenerator.Selector_SelectedIndexChanged(Object sender, EventArgs e) in C:\\Documents and Settings\\Jon\\My Documents\\Dropbox\\Visual Studio 2010\\Projects\\ExcelForms\\ExcelForms\\FReportGenerator.vb:line 293\"\tString\n \nEven if I skip the xlApp and try and use my module level range object it comes up with the same error.\n \nNot sure why I'm losing my objects.\n \nExcel 2003\nWindows XP\nVS 2010\n.NET 4.0\nNetOffice 1.5.1",
    "LastUpdatedDate": "2013-02-21T17:38:53.937-08:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Low",
      "Severity": 50,
      "Id": 1
    },
    "ProjectName": "netoffice",
    "ReportedDate": "2012-09-14T14:30:06.543-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Lose Excel objects after hiding form",
    "Type": {
      "Name": "Issue",
      "Id": 3
    },
    "VoteCount": 1,
    "Id": 18641
  },
  "FileAttachments": [],
  "Comments": [
    {
      "Message": "Here's the reentry code:\r\n\r\nPrivate Sub ListView1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ListView1.SelectedIndexChanged\r\n        RaiseEvent SelectedIndexChanged(sender, e)\r\n    End Sub\r\n\r\nPrivate Sub Selector_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mfSelector.SelectedIndexChanged\r\n        Try\r\n            mxlApp.Visible = True\r\n            Dim rTofilter = mrToFilter\r\n            Dim wks = DirectCast(rTofilter.Parent, Worksheet)\r\n            wks.Visible = XlSheetVisibility.xlSheetVisible\r\n            Dim rSelect As Range = Nothing\r\n            Dim bUnion = False\r\n            Array.ForEach(mfSelector.SelectedIndices.ToArray _\r\n                          , Sub(iRow)\r\n                                Dim rNew = CExcel.RRAnge(wks, iRow, 1, iRow, msaHeaders.Count)\r\n                                rSelect = If(bUnion, mxlApp.Union(rSelect, rNew), rNew)\r\n                                bUnion = True\r\n                            End Sub)\r\n\r\n            rSelect.Select()\r\n        Catch ex As Exception\r\n            MsgBox(ex.Message, MsgBoxStyle.Exclamation, \"Select Error\")\r\n        End Try\r\n\r\n    End Sub",
      "PostedDate": "2012-09-14T14:32:12.927-07:00",
      "Id": 203095
    },
    {
      "Message": "which type is mxlApp??? looks like a native COM proxy...\r\nplease check the IsDisposed property. btw: this property is not visible in intellisense\r\n\r\nSebastian",
      "PostedDate": "2012-09-14T17:57:19.41-07:00",
      "Id": 203096
    },
    {
      "Message": "i find your code looks okay. is this a mixed project with different office API's ?\r\ni create a special event in NetOffice 1.5.1.2 'OnDisposing' In C# it looks like\r\n\r\nExcel.Application app = new Excel.Application();\r\napp.OnDisposing += new NetOffice.OnDisposeEventHandler(OnDispose_OnDispose);\r\napp.Dispose(); // app_OnDispose should be called\r\n\r\nvoid app_OnDispose(NetOffice.OnDisposeEventArgs eventArgs)\r\n{\r\n      eventArgs.Cancel = CancelDispose;\r\n}\r\n\r\nits helpfull to set a breakpoint, show the stracktrace and see what happen. \r\n\r\n",
      "PostedDate": "2012-09-15T09:19:01.963-07:00",
      "Id": 203097
    },
    {
      "Message": "mxlApp just means module level Excel application. I pass in the xlApp object when I create a new instance of the form class that I am opening.\r\n\r\nIn VB to create an event from the object I would do it like this:\r\n\r\nAddHandler XLApp.OnDispose, OnDispose_OnDispose\r\n\r\nUnfortunately when I do this it doesn't recognize \".OnDispose\" event for some reason. It gives me an error.\r\n\r\nI checked the Excel objects and after I hide the form the object are disposed (.IsDisposed is True). I've done a work around that works for now but an event would be nicer.\r\n\r\nThis is basically what I did for my workaround:\r\n\r\nSub GetToFilter() As Range\r\n\r\nIf mrToFilter.IsDisposed Then\r\n            mxlApp = New NetOffice.ExcelApi.Application(mxlApp, (GetObject(, \"Excel.Application\")))\r\n            mrToFilter = mxlApp.Range(msToFilterRangeAddress)   'String of Address of range\r\n        End If\r\n\r\nReturn mrTofilter\r\n\r\nEnd Sub\r\n\r\nNot ideal but it works for now!",
      "PostedDate": "2012-09-17T12:12:36.597-07:00",
      "Id": 203098
    },
    {
      "Message": "I found the mistake in my code. I had passed the Range into a class ByVal and then disposed it. Unfortunately this disposed the original value also and the Excel application object also. Sorry for using your time on this. Is it supposed to affect the original values even though it is passed ByVal?\r\n\r\nIt was nice to learn about the Disposed event though, even though I can't get it to work with VB.NET.",
      "PostedDate": "2012-09-17T15:19:02.17-07:00",
      "Id": 203099
    },
    {
      "Message": "yes its important to understant that you working with proxies in other words the original range object lives in the COM server(excel) memory and your local range object and all the other objects are not real, just proxies. the NetOffice classes wraps these proxies. nice to know: these proxies are the same proxies that you use in a standard Interop assembly project but the interop assemblies gives you the intellisense for the proxies at design time(early binding).\r\n\r\nset a parameter ByVal or ByRef is not important because ByVal gives you a shallow copy.  \r\n\r\nDispose() means destroy the inner proxy. this is may different to interop assemblies because you works with the native proxies(supported by the interop assemblies) and you have to use ReleaseCOMObject to decrement the proxy counter for the object on the COM server and its not cleary for me VB.NET increment the proxy counter on the server if you use ByVal for a native proxy.\r\n\r\ni take a look today whats up with OnDispose and VB.NET (just tested in C# *my bad*)\r\n\r\nSebastian",
      "PostedDate": "2012-09-18T00:16:19.12-07:00",
      "Id": 203100
    },
    {
      "Message": "OnDisposed tested in VB and works fine:\r\n\r\nPrivate Sub Foo()\r\n\r\n    Dim excelApplication As New Excel.Application()\r\n    AddHandler excelApplication.OnDispose, AddressOf AppOnDisposed\r\n \r\n    excelApplication.Quit()\r\n    excelApplication.Dispose()\r\n\r\n    ' this is for removing, not necessary, just for example\r\n    ' RemoveHandler excelApplication.OnDispose, AddressOf AppOnDisposed\r\n\r\nEnd Sub\r\n\r\nPrivate Sub AppOnDisposed(ByVal eventArgs As OnDisposeEventArgs)\r\n\r\n    ' eventArgs.Cancel = True\r\n\r\nEnd Sub",
      "PostedDate": "2012-09-18T02:02:16.72-07:00",
      "Id": 203101
    }
  ]
}