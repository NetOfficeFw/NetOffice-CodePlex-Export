{
  "WorkItem": {
    "AffectedComponent": {
      "Name": "",
      "DisplayName": ""
    },
    "ClosedComment": "",
    "ClosedDate": null,
    "CommentCount": 5,
    "Custom": null,
    "Description": "When calling Workbook.ExportAsFixedFormat to save an Excel workbook as PDF quickly followed by Workbook.Close, the Excel app crashes but no exception is thrown by NetOffice.\r\n\r\nHere's the code to reproduce the issue:\r\n```\r\nvar s = $@\"C:\\users\\{Environment.UserName}\\desktop\\test.xlsx\";\r\nvar d = $@\"C:\\users\\{Environment.UserName}\\desktop\\test.pdf\";\r\n\r\nvar app = new Application() { Visible = true };\r\n\r\ntry\r\n{\r\n\tvar wb = app.Workbooks.Open(s);\r\n\twb.ExportAsFixedFormat(XlFixedFormatType.xlTypePDF, d, XlFixedFormatQuality.xlQualityMinimum, false, null, null, null, false);\r\n\r\n\t// 2. Adding the sleep for at least 16ms on my machine makes it succeed.\r\n\t//Thread.Sleep(20);\r\n\r\n\t// 1. It crashes on the following line.\r\n\twb.Close(false);\r\n\t\r\n\t// 3. Note that calling Close on the COM object works and properly closes the workbook.\r\n\t//((dynamic)wb.UnderlyingObject).Close(false);\r\n\t\r\n\tConsole.WriteLine(\"Done\");\r\n}\r\ncatch (Exception ex)\r\n{\r\n\tex.Dump();\r\n}\r\nfinally\r\n{\r\n\tapp.Quit();\r\n\tapp.Dispose();\r\n}\r\n```\r\n\r\nSome more details.\r\n1. On my machine, it crashes the Excel app when the code executes in 1.02s or less.\r\n2. On my machine (or on slower machines), it doesn't crash the Excel app when the code executes in 1.1s or more.\r\n3. Calling the Close method on the COM object itself doesn't crash the Excel app.\r\n\r\nI'm using NetOffice 1.7.3.0 with Office 2016 16.0.6741.2056 on Windows 10 Enterprise Anniversary Update, 64-bit. I used LINQPad to reproduce the scenario above.\r\n\r\nI have uploaded the LINQPad query (if needed). The Excel file (test.xlsx) is a very simple workbook with \"Hello World!\" in the first cell.\r\n\r\nUPDATE:\r\nIt looks like in some cases, it still crashes the Excel app even when calling the Close method on the COM object itself. This could be due to the dynamics framework being a bit slower to execute...",
    "LastUpdatedDate": "2016-08-25T13:05:47.55-07:00",
    "PlannedForRelease": "",
    "ReleaseVisibleToPublic": false,
    "Priority": {
      "Name": "Unassigned",
      "Severity": 0,
      "Id": 0
    },
    "ProjectName": "netoffice",
    "ReportedDate": "2016-08-23T13:43:31.467-07:00",
    "Status": {
      "Name": "Proposed",
      "Id": 1
    },
    "ReasonClosed": {
      "Name": "Unassigned"
    },
    "Summary": "Workbook.ExportAsFixedFormat followed by Workbook.Close crashes the Excel app but no exception is thrown",
    "Type": {
      "Name": "Unassigned",
      "Id": 5
    },
    "VoteCount": 1,
    "Id": 22310
  },
  "FileAttachments": [
    {
      "FileId": 1602885,
      "FileName": "NetOffice - Excel Workbook Close Issue.linq",
      "DownloadUrl": ".\\1602885"
    },
    {
      "FileId": 1602886,
      "FileName": "test.xlsx",
      "DownloadUrl": ".\\1602886"
    },
    {
      "FileId": 1603177,
      "FileName": "Excel app crash.png",
      "DownloadUrl": ".\\1603177"
    }
  ],
  "Comments": [
    {
      "Message": "Please explain, Excel crashes himself or you got an exception? For the moment i follow the exception idea.\n\nI need the exception details please. what kind of exception and any details or just an ex.ToString() or whatever you do in the Dump extension method.\n\nOne more interesting point is the value from \n\nint proxyCount = NetOffice.Core.Default.ProxyCount;\n(if you use an addin, {$addinInstance].Factory.Settings.ProxyCount)\n\nYour current Excel Version 32/64 Bit and Operating System 32/64 Bit CPU 32/64 Bit is also helpful to reproduce the problem.\n\nBTW, you need to call Thread.Sleep(20);\nPlease try:\nNetOffice.Settings.Default.MessageFilter.Enabled = true;\n\nThe message filter is a Microsoft feature to handle the problem that the RPC Server is currently busy.\nIt means wait for a while and try again automaticaly without xtra code. Netoffice spend a default implementation here.\n\n(The test.xlsx is just an empty workbook, i didnt understand what i can help here)\n\n*Sebastian\n\n\n\n\n",
      "PostedDate": "2016-08-24T06:02:44.02-07:00",
      "Id": 203743
    },
    {
      "Message": "Sebastian,\r\nAs I said, no exception is thrown. As I already said, I'm using NetOffice 1.7.3.0 with Office 2016 16.0.6741.2056 on Windows 10 Enterprise Anniversary Update, all 64-bit. My CPU is an Intel Core i7-5820K (more info at [ark.intel.com](http://ark.intel.com/products/82932/Intel-Core-i7-5820K-Processor-15M-Cache-up-to-3_60-GHz)) and is also 64-bit.\r\n\r\nCalling NetOffice.Core.Default.ProxyCount just before Workbook.Close method returns 9.\r\n\r\nSetting NetOffice.Settings.Default.MessageFilter.Enabled = true; has no effect and the Excel app still crashes.\r\n\r\nWhen I say that the Excel app crashes, it crashes with the window Microsoft Excel has stepped working. I included the screenshot in attachment. There's no exception at all that is raised. The code executes fine, but the Excel app is crashed and not responding after the Workbook.Close method is called.\r\n\r\nThe test.xlsx workbook is just the test workbook I'm using in my test. There's nothing to be done with it...",
      "PostedDate": "2016-08-24T06:54:15.403-07:00",
      "Id": 203744
    },
    {
      "Message": "this is some kind of bad magic -.-\n\n1) Thread.Sleep(20); fix the problem as well ?\n2) any details in the event log ?\n3) is your solution an addin or something else?\n4) your code is running in some kind of worker thread?\n5.) Can you try the following call instead?\n\nobject proxy = wb.UnderlyingObject;\nproxy.GetType().InvokeMember(\"Close\",\n                System.Reflection.BindingFlags.InvokeMethod, \n                null, proxy, new object[] { false });\n\nit is a plain late binding call without any netoffice logic to pin point the problem.\n\n\n*Sebastian\n",
      "PostedDate": "2016-08-25T06:16:29.77-07:00",
      "Id": 203757
    },
    {
      "Message": "Sebastian,\n1) Yes, it does fix the issue on my machine. The code seems to be executing too fast for Excel.\n\n2) I have the following entry in the event viewer.\n\n```\nLog Name:      Application\nSource:        Application Error\nDate:          2016-08-25 9:34:46 AM\nEvent ID:      1000\nTask Category: (100)\nLevel:         Error\nKeywords:      Classic\nUser:          N/A\nComputer:      maboivin-pc.xxx.local\nDescription:\nFaulting application name: EXCEL.EXE, version: 16.0.6741.2063, time stamp: 0x579e3ad1\nFaulting module name: EXCEL.EXE, version: 16.0.6741.2063, time stamp: 0x579e3ad1\nException code: 0xc0000005\nFault offset: 0x000000000031ec99\nFaulting process id: 0xa784\nFaulting application start time: 0x01d1fed571561d63\nFaulting application path: C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\nFaulting module path: C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\nReport Id: afddf70b-6ac8-11e6-9c0c-d0509936edec\nFaulting package full name: \nFaulting package-relative application ID: \nEvent Xml:\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Application Error\" />\n    <EventID Qualifiers=\"0\">1000</EventID>\n    <Level>2</Level>\n    <Task>100</Task>\n    <Keywords>0x80000000000000</Keywords>\n    <TimeCreated SystemTime=\"2016-08-25T13:34:46.797178400Z\" />\n    <EventRecordID>5655</EventRecordID>\n    <Channel>Application</Channel>\n    <Computer>maboivin-pc.xxx.local</Computer>\n    <Security />\n  </System>\n  <EventData>\n    <Data>EXCEL.EXE</Data>\n    <Data>16.0.6741.2063</Data>\n    <Data>579e3ad1</Data>\n    <Data>EXCEL.EXE</Data>\n    <Data>16.0.6741.2063</Data>\n    <Data>579e3ad1</Data>\n    <Data>c0000005</Data>\n    <Data>000000000031ec99</Data>\n    <Data>a784</Data>\n    <Data>01d1fed571561d63</Data>\n    <Data>C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE</Data>\n    <Data>C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE</Data>\n    <Data>afddf70b-6ac8-11e6-9c0c-d0509936edec</Data>\n    <Data>\n    </Data>\n    <Data>\n    </Data>\n  </EventData>\n</Event>\n```\n\n3) No, it's a simple console app. In my case, I tested the scenario using LINQPad. I was able to reproduce it on 3 different machines so far.\n\n4) No, it's running on the default thread.\n\n5) Calling the Close method on the proxy has no effect on the result and the Excel app still crashes.\n\nIn the end, I don't think it's a NetOffice issue. It looks more like it's an Excel 2016 issue... I was able to reproduce the issue using only the Excel Interop that ships with VS2015. I might have to report this issue to the Office team directly. Do you have any contact in the Office team?",
      "PostedDate": "2016-08-25T06:47:31.287-07:00",
      "Id": 203758
    },
    {
      "Message": "I have no contact to Microsoft (and i think they dont wont to fix it) \nWhen its possible please try another system with office 2016 because there is a lot of possible reasons for the crash, a third party addin, a faulty pdf printer driver and so on.\n\nMy theory why the dynamic call works is that the dynamic runtime system want fetch a lot of type informations at the first call before and this may need >=16ms in time - the delay you need to succeed.\n\nPlease try some other code instead instead of Close(false); may write some dumy text in a sheet and see how excel want handle that.\n\n*Sebastian\n\n\n",
      "PostedDate": "2016-08-25T13:05:47.55-07:00",
      "Id": 203762
    }
  ]
}