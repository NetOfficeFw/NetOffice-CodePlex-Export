<?xml version="1.0" encoding="utf-8"?>
<CodeplexIssue xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Id>22312</Id>
  <Title>Range.Offset[] does not work</Title>
  <DescriptionHtml xml:space="preserve"><![CDATA[The indexer .Offset[] does not work as expected. See full code below. I use Excel 2010 and NetOffice for .NET 4.5 obtained as a NuGet package
<pre><code>using System;
using Excel = NetOffice.ExcelApi;
using System.IO;

namespace NetOfficeBugs
{
    class Program
    {
       static void Main(string[] args)
        {
            using (var exApp = new Excel.Application())
            {
                Console.WriteLine($"Excel Version: {exApp.Version}");

                var xml = File.ReadAllText("example.xml");

                exApp.Visible = true;

                var workbook = exApp.Workbooks.Add();
                var sheet = (Excel.Worksheet)workbook.Worksheets[1];


                //Uncomment what you want to test
                //OffsetNetOffice(sheet);
                //OffsetUnderlyingObject(sheet);
            }

            Console.WriteLine();
            Console.WriteLine("Done executing!");
            Console.ReadLine();
        }

        private static void OffsetUnderlyingObject(Excel.Worksheet sheet)
        {
            var cell1 = (dynamic)sheet.Cells[5, 5].UnderlyingObject;
            Console.WriteLine($"cell1: {cell1.Address}");

            var cell2 = cell1.Offset[-1, 0];
            Console.WriteLine($"cell2: {cell2.Address}");

            var cell2OtherOverLoad = cell1.Offset[-1];
            Console.WriteLine($"cell2: {cell2OtherOverLoad.Address}");


            /*Output:
               Excel Version: 14.0
               cell1: $E$5
               cell2: $E$4
               cell2: $E$4
            */

        }

        private static void OffsetNetOffice(Excel.Worksheet sheet)
        {
            var cell1 = sheet.Cells[5, 5];
            Console.WriteLine($"cell1: {cell1.Address}");

            var cell2 = cell1.Offset[-1, 0];
            Console.WriteLine($"cell2: {cell2.Address}");

            var cell2OtherOverLoad = cell1.Offset[-1];
            Console.WriteLine($"cell2: {cell2OtherOverLoad.Address}");

            /*Output:
                Excel Version: 14.0
                cell1: $E$5
                cell2: $D$3
                cell2: $E$3
            */
        }</code></pre>]]></DescriptionHtml>
  <Status>Proposed</Status>
  <Type>Unassigned</Type>
  <Impact>Unassigned</Impact>
  <Comments>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[The output looks different. Thats the problem right?
What means the 
Console.WriteLine($"cell1: {cell1.Address}"); 
call ?? (IIS? PowerShell?) This is not C# in a desktop what i known.
There is a known issue with this indexers in visual basic - because vb can not see the real this indexer.
(You need an up cast here before) 
It looks like you face the same trap - but i didnt understand why. Can you explain more about the context?

Sebsastian]]></BodyHtml>
      <CreatedAt>2016-09-28T19:18:22.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>JBjurstam</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Hi Sebastian!

You can read about $ here:
<a href="http://stackoverflow.com/documentation/c%23/24/c-sharp-6-0-features/49/string-interpolation#t=201609290642042511322" rel="nofollow">http://stackoverflow.com/documentation/c%23/24/c-sharp-6-0-features/49/string-interpolation#t=201609290642042511322</a>

It's a nifty feature in C# 6.0

What is an up cast?

Yes, the problem is that the NetOffice wrapper Range.Offset returns a completely different Range-object than dynamic or PIA Range.Offset would. I use .Offset quite a lot because it allows me to hard code the address of one cell, then refer to other cells belonging
 to the same block of content by using relative positions to the first cell. That way, I don't need to change a ton of hard coded references if I need to move this block of content in the future.]]></BodyHtml>
      <CreatedAt>2016-09-29T08:58:27.0000000+02:00</CreatedAt>
    </CodeplexComment>
  </Comments>
  <ReportedBy>JBjurstam</ReportedBy>
  <ReportedAt>2016-09-28T08:27:50.0000000+00:00</ReportedAt>
</CodeplexIssue>