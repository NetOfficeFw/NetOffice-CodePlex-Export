<?xml version="1.0" encoding="utf-8"?>
<CodeplexIssue xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Id>18641</Id>
  <Title>Lose Excel objects after hiding form</Title>
  <DescriptionHtml xml:space="preserve"><![CDATA[I have module level variables in my form. Like range and Excel application. When I hide the form and show another form, the other form calls back to the hidden form and executes some code. So if I try and do anything with the the Excel objects it gives
 me the following error:
 
 
<pre><code>    Error Code  -2147467259 Integer</code></pre>
 
 
<ul>
<li>InnerException {"Method 'System.__ComObject.Visible' not found."} System.Exception
 
<pre><code>StackTrace  "   at NetOffice.Invoker.PropertySet(COMObject comObject, String name, Object[] value)     at NetOffice.ExcelApi._Application.set_Visible(Boolean value)     at ExcelForms.FReportGenerator.Selector_SelectedIndexChanged(Object sender, EventArgs e) in C:\Documents and Settings\Jon\My Documents\Dropbox\Visual Studio 2010\Projects\ExcelForms\ExcelForms\FReportGenerator.vb:line 293" String</code></pre>
 
Even if I skip the xlApp and try and use my module level range object it comes up with the same error.
 
Not sure why I'm losing my objects.
 
Excel 2003
Windows XP
VS 2010
.NET 4.0
NetOffice 1.5.1 </li></ul>]]></DescriptionHtml>
  <Status>Proposed</Status>
  <Type>Issue</Type>
  <Impact>Low</Impact>
  <Comments>
    <CodeplexComment>
      <Author>Jon49</Author>
      <BodyHtml xml:space="preserve"><![CDATA[Here's the reentry code: 

Private Sub ListView1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ListView1.SelectedIndexChanged
<pre><code>    RaiseEvent SelectedIndexChanged(sender, e)
End Sub
</code></pre>
Private Sub Selector_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mfSelector.SelectedIndexChanged
<pre><code>    Try
        mxlApp.Visible = True
        Dim rTofilter = mrToFilter
        Dim wks = DirectCast(rTofilter.Parent, Worksheet)
        wks.Visible = XlSheetVisibility.xlSheetVisible
        Dim rSelect As Range = Nothing
        Dim bUnion = False
        Array.ForEach(mfSelector.SelectedIndices.ToArray _
                      , Sub(iRow)
                            Dim rNew = CExcel.RRAnge(wks, iRow, 1, iRow, msaHeaders.Count)
                            rSelect = If(bUnion, mxlApp.Union(rSelect, rNew), rNew)
                            bUnion = True
                        End Sub)

        rSelect.Select()
    Catch ex As Exception
        MsgBox(ex.Message, MsgBoxStyle.Exclamation, "Select Error")
    End Try

End Sub</code></pre>]]></BodyHtml>
      <CreatedAt>2012-09-14T23:32:12.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[which type is mxlApp??? looks like a native COM proxy... 
please check the IsDisposed property. btw: this property is not visible in intellisense


Sebastian]]></BodyHtml>
      <CreatedAt>2012-09-15T02:57:19.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[i find your code looks okay. is this a mixed project with different office API's ?

i create a special event in NetOffice 1.5.1.2 'OnDisposing' In C# it looks like 

Excel.Application app = new Excel.Application(); 
app.OnDisposing += new NetOffice.OnDisposeEventHandler(OnDispose_OnDispose); 
app.Dispose(); // app_OnDispose should be called 

void app_OnDispose(NetOffice.OnDisposeEventArgs eventArgs) 
{
<pre><code>  eventArgs.Cancel = CancelDispose;</code></pre>
} 

its helpfull to set a breakpoint, show the stracktrace and see what happen.]]></BodyHtml>
      <CreatedAt>2012-09-15T18:19:01.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>Jon49</Author>
      <BodyHtml xml:space="preserve"><![CDATA[mxlApp just means module level Excel application. I pass in the xlApp object when I create a new instance of the form class that I am opening.


In VB to create an event from the object I would do it like this: 

AddHandler XLApp.OnDispose, OnDispose_OnDispose 

Unfortunately when I do this it doesn't recognize ".OnDispose" event for some reason. It gives me an error.


I checked the Excel objects and after I hide the form the object are disposed (.IsDisposed is True). I've done a work around that works for now but an event would be nicer.


This is basically what I did for my workaround: 

Sub GetToFilter() As Range 

If mrToFilter.IsDisposed Then
<pre><code>        mxlApp = New NetOffice.ExcelApi.Application(mxlApp, (GetObject(, "Excel.Application")))
        mrToFilter = mxlApp.Range(msToFilterRangeAddress)   'String of Address of range
    End If
</code></pre>
Return mrTofilter 

End Sub 

Not ideal but it works for now!]]></BodyHtml>
      <CreatedAt>2012-09-17T21:12:36.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>Jon49</Author>
      <BodyHtml xml:space="preserve"><![CDATA[I found the mistake in my code. I had passed the Range into a class ByVal and then disposed it. Unfortunately this disposed the original value also and the Excel application object also. Sorry for using your time on this. Is it supposed to affect the original
 values even though it is passed ByVal? 

It was nice to learn about the Disposed event though, even though I can't get it to work with VB.NET.]]></BodyHtml>
      <CreatedAt>2012-09-18T00:19:02.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[yes its important to understant that you working with proxies in other words the original range object lives in the COM server(excel) memory and your local range object and all the other objects are not real, just proxies. the NetOffice classes wraps these
 proxies. nice to know: these proxies are the same proxies that you use in a standard Interop assembly project but the interop assemblies gives you the intellisense for the proxies at design time(early binding).


set a parameter ByVal or ByRef is not important because ByVal gives you a shallow copy.

Dispose() means destroy the inner proxy. this is may different to interop assemblies because you works with the native proxies(supported by the interop assemblies) and you have to use ReleaseCOMObject to decrement the proxy counter for the object on the COM
 server and its not cleary for me VB.NET increment the proxy counter on the server if you use ByVal for a native proxy.


i take a look today whats up with OnDispose and VB.NET (just tested in C# <em>my bad</em>)


Sebastian]]></BodyHtml>
      <CreatedAt>2012-09-18T09:16:19.0000000+02:00</CreatedAt>
    </CodeplexComment>
    <CodeplexComment>
      <Author>SebastianDotNet</Author>
      <BodyHtml xml:space="preserve"><![CDATA[OnDisposed tested in VB and works fine: 

Private Sub Foo()
<pre><code>Dim excelApplication As New Excel.Application()
AddHandler excelApplication.OnDispose, AddressOf AppOnDisposed

excelApplication.Quit()
excelApplication.Dispose()

' this is for removing, not necessary, just for example
' RemoveHandler excelApplication.OnDispose, AddressOf AppOnDisposed
</code></pre>
End Sub 

Private Sub AppOnDisposed(ByVal eventArgs As OnDisposeEventArgs)
<pre><code>' eventArgs.Cancel = True
</code></pre>
End Sub]]></BodyHtml>
      <CreatedAt>2012-09-18T11:02:16.0000000+02:00</CreatedAt>
    </CodeplexComment>
  </Comments>
  <ReportedBy>Jon49</ReportedBy>
  <ReportedAt>2012-09-14T19:30:06.0000000+00:00</ReportedAt>
</CodeplexIssue>