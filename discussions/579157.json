[
  {
    "Id": "1347990",
    "ThreadId": "579157",
    "Html": "I had couple of word doc file containing multiple tables in it. My task was to convert them [ appending top down ] to xls. I had used NetOffice with C#  for the same.<br />\n<br />\nFor that I created Excel App and Word App and selected each tables one by one and pasted it in new sheet. <br />\n<br />\nOne known issue is that it was sharing clipboard to do the job. I would like to do it <strong>without using system clipboard</strong> but did not got any further improvement idea. If anyone can help me on that it'll be excellent for me. <br />\n<br />\nAlso I want to create a console app for this code and want to call is from R or java via system call. <br />\nPlease tell me whether it will work or not. If not then suggest me some way to do so. <br />\n<br />\nHere is the code :-<br />\n<pre><code>using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\n\n\nusing NetOffice;\nusing Excel = NetOffice.ExcelApi;\nusing Word = NetOffice.WordApi;\n\nnamespace Word_To_XLS\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // start excel and word and turn off msg boxes\n            Excel.Application excelApplication = new Excel.Application();\n            excelApplication.DisplayAlerts = false;\n\n            Word.Application wordApplication = new Word.Application();\n            wordApplication.DisplayAlerts = NetOffice.WordApi.Enums.WdAlertLevel.wdAlertsNone;\n\n\n            string[] filePaths = Directory.GetFiles(@&quot;C:\\tmp_Doc_to_XLS&quot;, &quot;*.doc&quot;);\n\n\n            //Path.GetFileNameWithoutExtension(filePaths[1]);\n\n            for (int doc_fn = 0; doc_fn &lt; filePaths.Length; doc_fn++)\n            {\n                if (!IsFileLocked(new FileInfo(filePaths[doc_fn])) &amp;&amp; !((File.GetAttributes(filePaths[doc_fn]) &amp; FileAttributes.Hidden) == FileAttributes.Hidden))\n                {\n\n                    Excel.Workbook workBook = excelApplication.Workbooks.Add();\n                    Excel.Worksheet workSheet = (Excel.Worksheet)workBook.Worksheets[1];\n\n\n                    // add a new document\n                    Word.Document word_doc = wordApplication.Documents.Open(filePaths[doc_fn]);\n\n\n                    int num_tables = word_doc.Tables.Count;\n\n                    if (num_tables &gt; 0)\n                    {\n                        for (int i = 1; i &lt;= num_tables; i++)\n                        {\n                            Word.Table table = word_doc.Tables[i];\n\n                            table.Range.Copy();\n\n                            Excel.Range last = workSheet.Cells.SpecialCells(NetOffice.ExcelApi.Enums.XlCellType.xlCellTypeLastCell);\n                            //Excel.Range range = workSheet.get_Range(&quot;A1&quot;, last);\n\n                            workSheet.Cells[last.Row + 2, 1].Activate();\n\n                            //workSheet.UsedRange.End(NetOffice.ExcelApi.Enums.XlDirection.xlDown).Select();\n\n                            workSheet.Paste();\n\n                            // kept for later :- workSheet.PasteSpecial(NetOffice.ExcelApi.Enums.XlPasteType.xlPasteValues, NetOffice.ExcelApi.Enums.XlPasteSpecialOperation.xlPasteSpecialOperationNone);            \n                        }\n                    }\n\n\n\n\n                    // save the book \n                    workBook.SaveAs(Path.GetDirectoryName(filePaths[doc_fn]) + &quot;\\\\&quot; + Path.GetFileNameWithoutExtension(filePaths[doc_fn]) + &quot;.xls&quot;, NetOffice.ExcelApi.Enums.XlFileFormat.xlWorkbookNormal);\n\n                    workBook.Close();\n                    workBook.Dispose();\n                }\n\n\n            }\n\n\n            // close word and dispose reference\n            wordApplication.Quit();\n            wordApplication.Dispose();\n            // close excel and dispose reference\n            excelApplication.Quit();\n            excelApplication.Dispose();\n        }\n\n        public static Boolean IsFileLocked(FileInfo file)\n        {\n            FileStream stream = null;\n\n            try\n            {\n                //Don't change FileAccess to ReadWrite, \n                //because if a file is in readOnly, it fails.\n                stream = file.Open\n                (\n                    FileMode.Open,\n                    FileAccess.Read,\n                    FileShare.None\n                );\n            }\n            catch (IOException)\n            {\n                //the file is unavailable because it is:\n                //still being written to\n                //or being processed by another thread\n                //or does not exist (has already been processed)\n                return true;\n            }\n            finally\n            {\n                if (stream != null)\n                    stream.Close();\n            }\n\n            //file is not locked\n            return false;\n        }\n    }\n}\n</code></pre>\n\n",
    "PostedDate": "2015-02-01T08:56:35.417-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]