[
  {
    "Id": "1313685",
    "ThreadId": "569880",
    "Html": "I would like to distribute my addin in a single .DLL file instead of having to create an installer that puts in all of the necessary NetOffice .DLL files -- effectively giving me a file copy deployment. \r<br />\n<br />\nI built out my solution with NetOffice and all worked great!  I modified it to combine the dependent DLLs with my addin's DLL and now I'm not getting called for the document before save event in Word.  Under the debugger I am getting called for the initialization that sets up the event handler, and I also get called in the shutdown process, but the document before save event isn't firing.  I didn't make any other changes to the project other than using ILMerge to pack the NetOffice DLLs into my DLL.\r<br />\n<br />\nThe addin I am playing around with here is a little utility that helps template developers utilize revision control systems.  When the user saves the document template in Word, the addin creates a folder beneath the template file and serializes all of the forms, classes, and code modules to independent files so that revision control systems can manage those details at a granular level.<br />\n",
    "PostedDate": "2014-10-15T10:18:11.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1313802",
    "ThreadId": "569880",
    "Html": "no idea about your single demployment concept(i like the idea, of course because im a developer).... in fact:\r<br />\nwhat i'm understand so far is as follows:<br />\n<ul>\n<li>your solution works fine so far on prod system</li>\n<li>\nnow you add/delete/change some reference assemblies and the before save event stop working(on same system, same office version)<br />\n</li>\n</ul>\ntrue? (try MS FusionLog in this case, becaue a refrence can't resolve and the runtime stops working)\r<br />\n<br />\n*Sebastian<br />\n",
    "PostedDate": "2014-10-15T19:55:17.93-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1314014",
    "ThreadId": "569880",
    "Html": "I work primarily with large enterprise customers in my day-to-day business.  I have a software company that provide document automation solutions to large banks.  In these environments, I often face some pretty strict constraints over how solutions can be deployed.  I have to have a deployment procedure that does not require administrative access on the PC.  The bank’s IT departments are very risk aversive so they try to thwart any possible entry points in their system that could be potential security breaches.\r<br />\n<br />\nI can try to explain in greater detail.  I created a Word AddIn .DLL file using NetOffice and with a traditional deployment, everything worked properly.  The solution requires my DLL plus the dependent NetOffice DLLs so I ended up requiring 5 DLLs to install for this to work properly:<br />\n<pre><code>WordSourceControl.dll   &lt;-- My Word AddIn DLL\nNetOffice.dll\nOfficeApi.dll\nWordApi.dll\nVBIDEApi.dll\n</code></pre>\n\nUpon creating the system I wrote up a short little setup program using Inno Setup.  This setup program installed my DLL along with the four NetOffice dependent DLLs.  I tested the system out on several virtual machines running different versions of Office (2007, 2010, 2013) and everything worked great.\r<br />\n<br />\nI decided that I would also like to support a single file / copy file deployment.  This would enable the add in to be installed just by being copying the single .DLL file into the user’s Word STARTUP folder C:\\Users{username}\\AppData\\Roaming\\Microsoft\\Word\\STARTUP.  When Word encounters DLLs in that folder, it will attempt to load them as a global addin.\r<br />\n<br />\nI added ILMerge to my build process (there’s a NuGet package that makes it really easy to do.)  As part of that process you simply list the assemblies that you want to combine:<br />\n<h1>this file contains the partial list of the merged assemblies in the merge order</h1>\n<h1>you can fill it from the obj\\CONFIG\\PROJECT.ilmerge generated on every build</h1>\n<h1>and finetune merge order to your satisfaction</h1>\nWordSourceControl.dll\r<br />\nNetOffice.dll\r<br />\nOfficeApi.dll\r<br />\nVBIDEApi.dll\r<br />\nWordApi.dll\r<br />\n<br />\nAt the end of the build process, ILmerge is invoked to combine all of the assemblies into a single assembly (the first one listed serves as the target assembly.)  So far, so good.  I looked at the generated assembly and it all looks to be there.\r<br />\n<br />\nWhen I run the AddIn in Word, however, I am no longer receiving the BeforeDocumentSave event.\r<br />\n<br />\nIn the debugger, I traced through the execution and found that the AddIn starts up correctly.  The AddIn constructor gets hit, I setup the event handlers for OnConnection and OnDisconnection and do in fact receive the events for both of those.<br />\n<pre><code>public class ThisAddin : COMAddin\n{\n    WordSourceControl wordSourceControl = null;\n\n    public ThisAddin()\n    {\n        this.OnConnection += new OnConnectionEventHandler(OnConnectionEvent);\n        this.OnDisconnection += new OnDisconnectionEventHandler(OnDisconnectionEvent);\n    }\n\n    private void OnConnectionEvent(object Application, ext_ConnectMode ConnectMode, object AddInInst, ref Array custom)\n    {\n        AutoDocsCore.WordApp = (Word.Application)this.Application;\n        wordSourceControl = new WordSourceControl(AutoDocsCore.WordApp);\n        wordSourceControl.Initialize();\n    }\n\n    private void OnDisconnectionEvent(ext_DisconnectMode RemoveMode, ref Array custom)\n    {\n        wordSourceControl.Shutdown();\n        wordSourceControl = null;\n        AutoDocsCore.WordApp = null;\n    }\n}\n</code></pre>\n\nYou’ll see that in the OnConnection event I’m creating my WordSourceCountrol object and calling into its Initialize method, which only serves to set up the event handler for the DocumentBeforeSave event:<br />\n<pre><code>    public void Initialize()\n    {\n        application.DocumentBeforeSaveEvent += new Word.Application_DocumentBeforeSaveEventHandler(DocumentBeforeSaveEvent);\n    }\n</code></pre>\n\nThe issue that I’m running into is that I never receive the DocumentBeforeSave event.\r<br />\n<br />\nI actually made no code changes to the project from the multi-file deployment.  The only thing I did was pack the assemblies into a single .DLL assembly which normally works fine.<br />\n\r<br />\nWhen writing .EXE files I will sometimes pack the dependent assemblies as embedded resources and add a resolver to load them up. That way I can have an executable that doesn’t require a setup program at all :-)\r<br />\n<br />\nI’m not sure if I was better able to describe this to you but I thought I would give it a try.  I will check in with FusionLog to see if that shows anything out of the ordinary.\r<br />\n<br />\nChad<br />\n",
    "PostedDate": "2014-10-16T08:42:17.493-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]