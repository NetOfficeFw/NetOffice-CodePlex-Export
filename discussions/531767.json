[
  {
    "Id": "1208055",
    "ThreadId": "531767",
    "Html": "Hello,  Had a need to generate a new customtaskpane per word document window.  Out of the box netoffice will generate your custom taskpane when the first window opens.  A call to   CTPFactoryAvailable happens once by default.  Subsequent window don't have a taskpane. What I found is that in order to get a new pane to open for new document I had to call CTPFactoryAvailable again. This requires saving a reference to CTPFactoryInst.<br />\n\r<br />\nThere was some confusion as to the difference between TaskPanes and TaskPaneInstances.  Feel that TaskPanes should rather be called RegisterTaskPanes.  TaskPaneInstances is a list the contentControl of the CustomTaskPane generated by CreateCTP.<br />\n\r<br />\nWhat I had issues with was removing of the TaskPaneInstances when a window would close.  See this article [<a href=\"http://msdn.microsoft.com/en-us/library/bb264456.aspx](Managing\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/bb264456.aspx](Managing</a> Task Panes in Multiple Word and InfoPath Documents)\r<br />\n<br />\nProblem was that TaskPaneInstances isn't a list of CustomTaskPane just the control.  So there wasn't a way of telling office to remove the pane.  Capturing these objects in CTPFactoryAvailable override.  Essentially I needed to call CustomTaskPane.Delete() to get the pane to go away:)\r<br />\n<br />\nIs there a reason that TaskPaneInstances isn't a list of CustomTaskPane.  You can reach the necessary control via ContentControl?\r<br />\n<br />\nSometimes I get two instances of the TaskPane for a document that is opened twice?\r<br />\n<br />\nTaskPane and TaskPaneInstances are protected which causes you to pass them around.  Could they be friend?\r<br />\n<br />\nAfter removing the CustomTaskPane if I don't reassign TaskPanes[?].Pane to a valid CustomTaskPane bad things happen.  Currently just finding one and plugging it in.  There would be issues if there were multiple panes being created for each window.<br />\n<pre><code>private object _CTPFactoryInst;\n\n        private List&lt;_CustomTaskPane&gt; customTaskPanes = new List&lt;_CustomTaskPane&gt;();\n\n        public override void CTPFactoryAvailable(object CTPFactoryInst)\n        {\n            _CTPFactoryInst = CTPFactoryInst;\n\n            base.CTPFactoryAvailable(CTPFactoryInst);\n\n            foreach (TaskPaneInfo item in TaskPanes)\n            {\n                customTaskPanes.Add(item.Pane);\n            }\n\n        }\n\n        private void RemoveOrphanedTaskPanes()\n        {\n            for (int i = customTaskPanes.Count(); i &gt; 0; i--)\n            {\n                var customPane = customTaskPanes[i - 1];\n                if (customPane.Window == null)\n                {\n                    var control = (customPane.ContentControl as NetOffice.WordApi.Tools.ITaskPane);\n                    control.OnDisconnection();\n                    TaskPaneInstances.Remove(control);\n                    customPane.Delete();\n                    customTaskPanes.Remove(customPane);\n                    \n                    //reassign a live customtaskpane to to the Pane property\n                    //this will start to fail if there is more than one customtaskpane being created for each window.\n                    TaskPanes[0].Pane = customTaskPanes.FirstOrDefault();\n                }\n            }\n        }\n\n    /// &lt;summary&gt;\n        /// Called each time a document is opened.  event called before addin exists so only fires after word is loaded.\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;Doc&quot;&gt;&lt;/param&gt;\n        public void Application_DocumentOpenEvent(NetOffice.WordApi.Document Doc)\n        {\n            if (Application.ShowWindowsInTaskbar)\n            {\n                RemoveOrphanedTaskPanes();\n               //register a taskpane in TaskPanes if havn't already\n                CTPFactoryAvailable(_CTPFactoryInst);\n            }\n\n            \n        }</code></pre>\n\n",
    "PostedDate": "2014-02-13T11:15:21.703-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1208173",
    "ThreadId": "531767",
    "Html": "After more testing it seemed like it was mostly working but the custom task pane events were not working.   CTPFactoryAvailable is overridden with the guts from the base class and is altered a little.  I can see that CTPFactoryAvailable  is already different in the newer version of netoffice.\r<br />\n<br />\nThis one you add new task panes to the TaskPanes collection and then call CTPFactoryAvailable.\r<br />\n<br />\nCTPFactoryAvailable goes through the TaskPanes and loads whatever is not already loaded.<br />\n\r<br />\nAlso the CustomTaskPane is passed as one of the argument to the pane.OnConnection.  Had the need to set the visibility of the pane from inside the control.\r<br />\n<br />\nRemoveOrphanedTaskPanes now just interacts with the TaskPanes.<br />\n<pre><code>private object _CTPFactoryInst;\n\n        /// &lt;summary&gt;\n        /// ICustomTaskPaneConsumer implementation\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;CTPFactoryInst&quot;&gt;factory proxy from host application&lt;/param&gt;\n        public override void CTPFactoryAvailable(object CTPFactoryInst)\n        {\n            _CTPFactoryInst = CTPFactoryInst;\n\n            try\n            {\n                if (null != CTPFactoryInst)\n                {\n                    TaskPaneFactory = new NetOffice.OfficeApi.ICTPFactory(Application, CTPFactoryInst);\n                    foreach (TaskPaneInfo item in TaskPanes)\n                    {\n                        if (item.IsLoaded)\n                            continue;\n\n                        string title = item.Title;\n                        _CustomTaskPane taskPane = TaskPaneFactory.CreateCTP(item.Type.FullName, title);\n                        item.Pane = taskPane;\n                        item.IsLoaded = true;\n\n                        NetOffice.WordApi.Tools.ITaskPane pane = taskPane.ContentControl as NetOffice.WordApi.Tools.ITaskPane;\n                        if (null != pane)\n                        {\n                            TaskPaneInstances.Add(pane);\n                            var argumentArray = new List&lt;object&gt;();\n\n                            argumentArray.Add(item);\n\n                            if (item.Arguments != null)\n                                argumentArray.AddRange(item.Arguments);\n                            \n                            pane.OnConnection(Application, argumentArray.ToArray());\n                        }\n\n                        foreach (KeyValuePair&lt;string, object&gt; property in item.ChangedProperties)\n                            if (property.Key != &quot;Title&quot;)\n                                taskPane.GetType().InvokeMember(property.Key, BindingFlags.SetProperty, null, taskPane, new object[] { property.Value });\n                    }\n                }\n            }\n            catch (Exception exception)\n            {\n                NetOffice.DebugConsole.WriteException(exception);\n            }\n        }\n\n        private void RemoveOrphanedTaskPanes()\n        {\n            for (int i = TaskPanes.Count(); i &gt; 0; i--)\n            {\n                var taskPane = TaskPanes[i - 1];\n\n                if ((taskPane.Pane as CustomTaskPane).UnderlyingObject == null)\n                    continue;\n\n                if (taskPane.Pane.Window == null)\n                {\n                    var control = (taskPane.Pane.ContentControl as NetOffice.WordApi.Tools.ITaskPane);\n                    control.OnDisconnection();\n                    TaskPaneInstances.Remove(control);\n                    taskPane.Pane.Delete();\n                    taskPane.Pane.Dispose();\n                }\n            }\n        }</code></pre>\n\n",
    "PostedDate": "2014-02-13T18:24:47.377-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]