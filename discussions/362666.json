[
  {
    "Id": "859654",
    "ThreadId": "362666",
    "Html": "\r\n<p>Hi there</p>\r\n<p>I'm currently trying to switch from an Interop approach to using NetOffice assemblies for interaction with Word from our C#.NET application. The old approach did work perfectly except for the Office different versions problem which drove me to try out NetOffice\r\n in the first place.</p>\r\n<p>We're basically opening a Word document which acts as a template with placeholders with a defined Pattern (e.g. {{Placeholder}} ). The method where I encounter the problem iterates through the StoryRanges found in the document and builds a Dictionary of\r\n all placeholders found. For that we use the Range.Find method which with the Interop approach allowed to get through to Parent elements and access the Text property there. See the following code snippet for our solution:</p>\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>[...]\r\n<span style=\"color:blue\">using</span> Word = NetOffice.WordApi;\r\n<span style=\"color:blue\">using</span> Office = NetOffice.OfficeApi;\r\n<span style=\"color:blue\">using</span> NetOffice.WordApi.Enums;\r\n<span style=\"color:blue\">using</span> LateBindingApi.Core;\r\n\r\n[...]\r\n\r\n        <span style=\"color:blue\">private</span> Dictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">string</span>&gt; GetPlaceHolders(Word.Document document) {\r\n            Dictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">string</span>&gt; phDict = <span style=\"color:blue\">new</span> Dictionary&lt;<span style=\"color:blue\">string</span>, <span style=\"color:blue\">string</span>&gt;();\r\n            <span style=\"color:blue\">object</span> missing = Type.Missing;\r\n            <span style=\"color:blue\">object</span> replaceNone = WdReplace.wdReplaceNone;\r\n\r\n            GotoPage(document, 1);\r\n\r\n            <span style=\"color:blue\">foreach</span> (Word.Range tmpRange <span style=\"color:blue\">in</span> document.StoryRanges) {\r\n                tmpRange.Find.Text = PlaceHolderPattern;\r\n                tmpRange.Find.Forward = <span style=\"color:blue\">true</span>;\r\n                tmpRange.Find.MatchWildcards = <span style=\"color:blue\">true</span>;\r\n\r\n                tmpRange.Find.Execute(missing, missing, missing,\r\n                                    missing, missing, missing, missing,\r\n                                    missing, missing, missing, replaceNone,\r\n                                    missing, missing, missing, missing);\r\n                <span style=\"color:blue\">while</span> (tmpRange.Find.Found) {\r\n                    <span style=\"color:blue\">if</span> (tmpRange.Find.Parent != <span style=\"color:blue\">null</span>) {\r\n                        <span style=\"color:blue\">if</span> (!phDict.ContainsKey(tmpRange.Find.Parent.Text)) {\r\n                            phDict.Add(tmpRange.Find.Parent.Text, <span style=\"color:#a31515\">&quot;&quot;</span>);\r\n                        }\r\n                        tmpRange.Find.Execute(missing, missing, missing,\r\n                                    missing, missing, missing, missing,\r\n                                    missing, missing, missing, replaceNone,\r\n                                    missing, missing, missing, missing);\r\n                    }\r\n                }\r\n            }\r\n            <span style=\"color:blue\">return</span> phDict;\r\n        }\r\n\r\n[...]\r\n</pre>\r\n</div>\r\n<p></p>\r\n<p>This gives me the following error:</p>\r\n<p>'LateBindingApi.Core.COMObject' does not contain a definition for 'Text' and no extension method 'Text' accepting a first argument of type 'LateBindingApi.Core.COMObject' could be found (are you missing a using directive or an assembly reference?)</p>\r\n<p>Could anyone give me a clue as to how I can access this property or if this has not been implemented yet in the NetOffice project?</p>\r\n<p>Many thanks!</p>\r\n",
    "PostedDate": "2012-07-10T06:32:05.31-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "860228",
    "ThreadId": "362666",
    "Html": "\r\n<p>hello,<br>\r\n<br>\r\nthe problem is the following code line:<br>\r\n<br>\r\nphDict.Add(tmpRange.Find.Parent.Text, <span style=\"color:#a31515\">&quot;&quot;</span>);</p>\r\n<pre>the Word.Find class contains a Parent property. the Parent property can be a Word.Selection object or a Word.Range object at runtime and i'm wondering about this code works with fine the Interop Assemblies.<br><br>this Parent property is COMObject in NetOffice 1.4.1 and Object in NetOffice 1.5.1 because VB developers can use latebinding kicks.<br><br>the easiest way is to convert to Parent at runtime:<br><br>phDict.Add((tmpRange.Find.Parent as Excel.Range).Text, <span style=\"color:#a31515\">&quot;&quot;</span>);<br><br>BTW: dont forget to dispose your object to keep the memory usage low. now worries, its easy to use: <a href=\"http://netoffice.codeplex.com/wikipage?title=Tec_Documentation_English_Management\">Dispose COM proxies</a><br><br>Sebastian<br><br></pre>\r\n",
    "PostedDate": "2012-07-11T02:49:19.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "870745",
    "ThreadId": "362666",
    "Html": "<p>Hi Sebastian</p>\r\n<p>many thanks for your reply, this is the solution. I'm using Word tables, so it's Word.Range in my case.</p>\r\n<p>Now I've managed to switch pretty much everything to Word 2003, except of course unsupported features like PDF export.</p>\r\n<p>Cheers<br />Dominik</p>",
    "PostedDate": "2012-07-17T05:29:55.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]