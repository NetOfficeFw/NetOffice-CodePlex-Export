[
  {
    "Id": "1065494",
    "ThreadId": "449288",
    "Html": "I use this code to convert a pptx file to a xps file.but there is an error.<br />\nbut word file is fine using the netoffice api !<br />\nusing System;<br />\nusing System.Collections.Generic;<br />\nusing System.Linq;<br />\nusing System.Text;<br />\nusing System.IO;<br />\nusing Excel = NetOffice.ExcelApi;<br />\nusing PowerPoint = NetOffice.PowerPointApi;<br />\nusing Word = NetOffice.WordApi;<br />\n<br />\n<br />\nusing ExampleBase;<br />\n<br />\nusing NetOffice;<br />\n<br />\nusing Office = NetOffice.OfficeApi;<br />\nusing NetOffice.WordApi.Enums;<br />\nusing NetOffice.OfficeApi.Enums;<br />\nusing NetOffice.PowerPointApi.Enums;<br />\nusing System.Reflection;<br />\n<pre><code>private static OfficeToXpsConversionResult ConvertFromPowerPoint(string sourceFilePath, ref string resultFilePath)\n    {\n        string pSourceDocPath = sourceFilePath;\n        string pExportFilePath = string.IsNullOrEmpty(resultFilePath) ? GetTempXpsFilePath() : resultFilePath;\n        try\n        {\n            PowerPoint.Application pptApplication =null;\n            PowerPoint.Presentation  pptPresentation = null;\n            try\n            {\n                pptApplication = new PowerPoint.Application();\n            }\n            catch (Exception exc)\n            {\n                return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToInitializeOfficeApp, &quot;PowerPoint&quot;, exc);\n            }\n\n            try\n            {\n                try\n                {\n                    pptPresentation = pptApplication.Presentations.Open(pSourceDocPath, MsoTriState.msoTrue, MsoTriState.msoTrue, MsoTriState.msoFalse);\n                }\n                catch (Exception exc)\n                {\n                    return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToOpenOfficeFile, exc.Message, exc);\n                }\n\n                if (pptPresentation != null)\n                {\n                    try\n                    {\n                     pptPresentation.ExportAsFixedFormat(pExportFilePath,\n                       NetOffice.PowerPointApi.Enums.PpFixedFormatType.ppFixedFormatTypeXPS,\n                       NetOffice.PowerPointApi.Enums.PpFixedFormatIntent.ppFixedFormatIntentScreen,\n                       NetOffice.OfficeApi.Enums.MsoTriState.msoFalse,\n                       NetOffice.PowerPointApi.Enums.PpPrintHandoutOrder.ppPrintHandoutVerticalFirst,\n                       NetOffice.PowerPointApi.Enums.PpPrintOutputType.ppPrintOutputSlides,\n                       NetOffice.OfficeApi.Enums.MsoTriState.msoFalse,\n                       null,\n                       NetOffice.PowerPointApi.Enums.PpPrintRangeType.ppPrintAll,\n                       string.Empty,\n                       false,\n                       true,\n                       false,\n                       true,\n                       false,\n                       Missing.Value\n                       );\n\n                    //pptPresentation.ExportAsFixedFormat2(\n                    //                    pExportFilePath,\n                    //                    PpFixedFormatType.ppFixedFormatTypeXPS,\n                    //                    PpFixedFormatIntent.ppFixedFormatIntentScreen,\n                    //                    MsoTriState.msoFalse,\n                    //                    PpPrintHandoutOrder.ppPrintHandoutVerticalFirst,\n                    //                    PpPrintOutputType.ppPrintOutputSlides,\n                    //                    MsoTriState.msoFalse,\n                    //                    null, PpPrintRangeType.ppPrintAll,\n                    //                    string.Empty,\n                    //                    false,\n                    //                    true,\n                    //                    false,\n                    //                    true,\n                    //                    false\n                    //                );\n\n                    }\n                    catch (Exception exc)\n                    {\n                        return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToExportToXps, &quot;PowerPoint&quot;, exc);\n                    }\n                }\n                else\n                {\n                    return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToOpenOfficeFile);\n                }\n            }\n            finally\n            {\n                // Close and release the Document object.\n                if (pptPresentation != null)\n                {\n                    pptPresentation.Close();\n                    pptPresentation = null;\n                }\n\n                // Quit Word and release the ApplicationClass object.\n                if (pptApplication != null)\n                {\n                    pptApplication.Quit();\n                    pptApplication = null;\n                }\n\n                GC.Collect();\n                GC.WaitForPendingFinalizers();\n                GC.Collect();\n                GC.WaitForPendingFinalizers();\n            }\n        }\n        catch (Exception exc)\n        {\n            return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToAccessOfficeInterop, &quot;PowerPoint&quot;, exc);\n        }\n\n        resultFilePath = pExportFilePath;\n\n        return new OfficeToXpsConversionResult(ConversionResult.OK, pExportFilePath);\n\n    }</code></pre>\n\n",
    "PostedDate": "2013-07-08T03:02:01.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1065586",
    "ThreadId": "449288",
    "Html": "what do you think i can do for you without the informations: error line, exception info, office version and so on? :o<br />\n",
    "PostedDate": "2013-07-08T07:28:10.053-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1065887",
    "ThreadId": "449288",
    "Html": "<strong>SebastianDotNet wrote:</strong><br />\n<blockquote>\nwhat do you think i can do for you without the informations: error line, exception info, office version and so on? :o<br />\nthank you for reply<br />\nThe officeversion is 2007, and the error line is <br />\npptPresentation.ExportAsFixedFormat(pExportFilePath, ... <br />\nthen turn to the catch line<br />\n</blockquote>\n<pre><code>    //                    false\n                //                );\n\n                }\n                catch (Exception exc)\n                {\n                    return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToExportToXps, &quot;PowerPoint&quot;, exc);\n                }\n            }</code></pre>\n\n.....................................................<br />\nthe same code  use Microsoft.Office.Interop is fine.<br />\n<br />\nusing System;<br />\nusing System.Collections.Generic;<br />\nusing System.Linq;<br />\nusing System.Text;<br />\nusing System.IO;<br />\nusing Excel = Microsoft.Office.Interop.Excel;<br />\nusing PowerPoint = Microsoft.Office.Interop.PowerPoint;<br />\nusing Word = Microsoft.Office.Interop.Word;<br />\n<pre><code>private static OfficeToXpsConversionResult ConvertFromPowerPoint(string sourceFilePath, ref string resultFilePath)\n    {\n        string pSourceDocPath = sourceFilePath;\n\n        string pExportFilePath = string.IsNullOrEmpty(resultFilePath) ? GetTempXpsFilePath() : resultFilePath;\n\n        try\n        {\n            PowerPoint.Application pptApplication = null;\n            PowerPoint.Presentation pptPresentation = null;\n\n            try\n            {\n                pptApplication = new PowerPoint.Application();\n            }\n            catch (Exception exc)\n            {\n                return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToInitializeOfficeApp, &quot;PowerPoint&quot;, exc);\n            }\n\n            try\n            {\n                try\n                {\n                    pptPresentation = pptApplication.Presentations.Open(pSourceDocPath,\n                                                                        Microsoft.Office.Core.MsoTriState.msoTrue,\n                                                                        Microsoft.Office.Core.MsoTriState.msoTrue,\n                                                                        Microsoft.Office.Core.MsoTriState.msoFalse);\n                }\n                catch (Exception exc)\n                {\n                    return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToOpenOfficeFile, exc.Message, exc);\n                }\n\n                if (pptPresentation != null)\n                {\n                    try\n                    {\n                        pptPresentation.ExportAsFixedFormat(\n                                            pExportFilePath,\n                                            PowerPoint.PpFixedFormatType.ppFixedFormatTypeXPS,\n                                            PowerPoint.PpFixedFormatIntent.ppFixedFormatIntentScreen,\n                                            Microsoft.Office.Core.MsoTriState.msoFalse,\n                                            PowerPoint.PpPrintHandoutOrder.ppPrintHandoutVerticalFirst,\n                                            PowerPoint.PpPrintOutputType.ppPrintOutputSlides,\n                                            Microsoft.Office.Core.MsoTriState.msoFalse,\n                                            null,\n                                            PowerPoint.PpPrintRangeType.ppPrintAll,\n                                            string.Empty,\n                                            true,\n                                            true,\n                                            true,\n                                            true,\n                                            false\n                                        );\n                    }\n                    catch (Exception exc)\n                    {\n                        return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToExportToXps, &quot;PowerPoint&quot;, exc);\n                    }\n                }\n                else\n                {\n                    return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToOpenOfficeFile);\n                }\n            }\n            finally\n            {\n                // Close and release the Document object.\n                if (pptPresentation != null)\n                {\n                    pptPresentation.Close();\n                    pptPresentation = null;\n                }\n\n                // Quit Word and release the ApplicationClass object.\n                if (pptApplication != null)\n                {\n                    pptApplication.Quit();\n                    pptApplication = null;\n                }\n\n                GC.Collect();\n                GC.WaitForPendingFinalizers();\n                GC.Collect();\n                GC.WaitForPendingFinalizers();\n            }\n        }\n        catch (Exception exc)\n        {\n            return new OfficeToXpsConversionResult(ConversionResult.ErrorUnableToAccessOfficeInterop, &quot;PowerPoint&quot;, exc);\n        }\n\n        resultFilePath = pExportFilePath;\n\n        return new OfficeToXpsConversionResult(ConversionResult.OK, pExportFilePath);\n    }\n\n</code></pre>\n\n",
    "PostedDate": "2013-07-08T18:57:30.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1066782",
    "ThreadId": "449288",
    "Html": "OMG this is powerpoint bug, the method doesnt support latebinding becuse microsoft does a mistake and set the default value for the printrange parameter to 0. the method is not callable as c# dynamic or vb latebinding for this reason without a valid printrange parameter. \r<br />\n<br />\nPowerPoint.PrintRanges ranges = pptPresentation.PrintOptions.Ranges;\r<br />\nPowerPoint.PrintRange range =  ranges.Add(1, 1);\r<br />\n<br />\nchange null to range and it works for me.(add the last parameter)\r<br />\nnext time, please gimme more exception info incl. innerexceptions. i can help you much faster with these info.\r<br />\n<br />\nbtw:\r<br />\nyou dont need this scary stuff in NetOffice:\r<br />\nGC.Collect();\r<br />\nGC.WaitForPendingFinalizers();\r<br />\n<br />\nuse pptApplication.Dispose() after Quit() and thats all you have to do. no com proxy is alive any longer.\r<br />\n<br />\nsebastian<br />\n",
    "PostedDate": "2013-07-10T14:26:59.043-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]