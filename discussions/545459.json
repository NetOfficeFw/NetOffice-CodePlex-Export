[
  {
    "Id": "1245800",
    "ThreadId": "545459",
    "Html": "Iâ€™m new to NetOffice. Very cool product! I appreciate the hard work.\r<br />\n<br />\nMy MS Word add-in pane was appearing until I clicked the Close X button on the add-in. Now it won't appear. However, when I launch MS Word via NetOffice.DeveloperToolbox's OfficeUI feature, my add-in pane is visible.\r<br />\n<br />\nI have a MS Word menu button and that button toggles the Visible state of the pane. That button works when Word is launched via NetOffice.DeveloperToolbox. But it doesn't show the pane when Word is launched normally.\r<br />\n<br />\nWhen I launch MS Word, a document opens automatically. It's that same document that was open when my pane was visible and I clicked the Close/X button. I've added break points to my add-in's AddIn class and it is indeed being created when MS Word starts.\r<br />\n<br />\nMaybe MS Word saves the add-in's Visible in the document. Or perhaps in a registry key. Or even in a file. But even so, why doesn't setting Visible=true show the pane?<br />\n<ul>\n<li>Windows 7 x64</li>\n<li>Office 2010 Home &amp; Student x64</li>\n<li>NetOffice 1.6.0</li>\n<li>\nWhen I created the add-in via the wizard, I choose Current User.<br />\n</li>\n</ul>\n<pre><code>namespace FcptWordEmrTaskPaneAddIn {\n    [COMAddin(&quot;FcptWord&quot;, &quot;First Choice PT MS Word EMR Add-In&quot;, 3)]\n    [GuidAttribute(&quot;2A47524B-E1A2-4F32-9826-864EE9DFA740&quot;), ProgId(&quot;FcptWord.TaskPaneAddin&quot;)]\n    public class Addin : COMAddin {\n        public Addin() {\n            this.OnStartupComplete += new OnStartupCompleteEventHandler(Addin_OnStartupComplete);\n            this.OnConnection += new OnConnectionEventHandler(Addin_OnConnection);\n            this.OnDisconnection += new OnDisconnectionEventHandler(Addin_OnDisconnection);\n\n            var app = Word.Application.GetActiveInstance();\n            \n            string title = &quot;EMR Task Pane&quot;;\n            TaskPanes.Add(typeof(AddInUI), title);\n            foreach (var tp in TaskPanes) {\n                if (tp.Title == title) {\n                    tp.DockPosition = MsoCTPDockPosition.msoCTPDockPositionLeft;\n                    tp.DockPositionRestrict = MsoCTPDockPositionRestrict.msoCTPDockPositionRestrictNoHorizontal;\n                    tp.Width = 150;\n                    tp.Visible = true;\n                    tp.Arguments = new object[] { this };\n                    var cc = app.CustomizationContext;\n                }\n            }\n        }\n\n        void Addin_OnConnection(object Application, NetOffice.Tools.ext_ConnectMode ConnectMode, object AddInInst, ref Array custom) { }\n\n        void Addin_OnStartupComplete(ref Array custom) {\n            CreateUserInterface();\n        }\n\n        void Addin_OnDisconnection(NetOffice.Tools.ext_DisconnectMode RemoveMode, ref Array custom) {\n            RemoveUserInterface();\n        }\n\n        void CreateUserInterface() {\n            var app = Word.Application.GetActiveInstance();\n            CommandBar fileMnuBar = app.CommandBars[&quot;File&quot;];\n            fileMnuBar.Reset();\n            var OptionsButton = (CommandBarButton)fileMnuBar.Controls.Add(MsoControlType.msoControlButton, System.Type.Missing, System.Type.Missing, fileMnuBar.Position + 3, true);\n            OptionsButton.Tag = &quot;cxrnd1024&quot;;\n            OptionsButton.Style = MsoButtonStyle.msoButtonIconAndCaption;\n            OptionsButton.Caption = &quot;EMR&quot;;\n            OptionsButton.ClickEvent += new CommandBarButton_ClickEventHandler(FcptEmr_ClickEvent);\n        }\n\n        void FcptEmr_ClickEvent(CommandBarButton Ctrl, ref bool CancelDefault) {\n            foreach (var tp in TaskPanes) {\n                try {\n                    tp.Visible = !tp.Visible;\n                } catch (Exception) { }\n            }\n        }\n\n        void RemoveUserInterface() { }\n    }\n}\n</code></pre>\n\n",
    "PostedDate": "2014-05-15T09:50:37.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1246341",
    "ThreadId": "545459",
    "Html": "okay... this means the pane is visible at first MS-Word start and never again? (it looks like for an unhandled exception)\r<br />\nif its possible, please send me your solution to public[at]sebastian.web.de(remove private code, i dont need this to clearify the situation)\r<br />\n<br />\nBTW: i suggest you to avoid 'GetActiveInstance()' this method gives you the first instance in memory but not sure its your's. (may multiple word instances currently working) \r<br />\n<br />\nBetter idea:\r<br />\n<br />\nKeep the application in a private field:\r<br />\n<br />\nprivate NetOffice.WordApi.Application _app;\r<br />\n<br />\nvoid Addin_OnConnection(object Application, NetOffice.Tools.ext_ConnectMode ConnectMode, object AddInInst, ref Array custom) \r<br />\n{\r<br />\n   _app = new NetOffice.WordApi.Application(null, Application);\r<br />\n}\r<br />\n<br />\nvoid Addin_OnDisconnection(NetOffice.Tools.ext_DisconnectMode RemoveMode, ref Array custom) \r<br />\n{<br />\n<pre><code>RemoveUserInterface();\n _app.Dispose();</code></pre>\n\n}\r<br />\n<br />\n(Nice to know: NO 1.7 makes this easier with the NO Tools, the application is available here as addin instance property)\r<br />\n<br />\n*Sebastian<br />\n",
    "PostedDate": "2014-05-16T13:49:17.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1247378",
    "ThreadId": "545459",
    "Html": "I got it working. Thank you for the suggestions. Your assistance is appreciated. Thanks for GetActiveInstance() tip too!\r<br />\n<br />\nGreg<br />\n",
    "PostedDate": "2014-05-20T06:05:42.81-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]