[
  {
    "Id": "1362738",
    "ThreadId": "586132",
    "Html": "Hi Sebastian,\r<br />\n<br />\nFirstly thanks for such a great product. We have multiple versions of MS Office and NetOffice just makes implementation into this type of environment easy.\r<br />\n<br />\nI have a strange error with DAOApi.Property. When the DAOApi.Properties(i)  is assigned to a DAOApi.Property variable the following error occurs:\r<br />\n<br />\nClass not exists: NetOffice.ExcelApi.Property\r<br />\n<br />\nMy Dev machine is Win7 Pro 64 with Office 2010 32 bit.\r<br />\n<br />\nI much appreciate your assistance with this matter.\r<br />\n<br />\nCheers,\r<br />\n<br />\nGordon\r<br />\n<br />\nThe Method Code follows:\r<br />\n<br />\nPrivate Function HasFieldProperty(ByRef checkField As Field,<br />\n<pre><code>                                      ByVal checkPropertyName As String) As Boolean\n\n        ' Determine if the fieldToCheck has the 'Property Name' (eg: Format, Input Mask,....)\n        Dim fldName = checkField.Name\n\n        ' Check if PropertyName Exists\n        Dim propertyExists As Boolean = False\n\n        Dim fldProperty As NetOffice.DAOApi.Property = Nothing\n        Dim fldProperties As NetOffice.DAOApi.Properties = Nothing\n\n        Try\n            fldProperties = checkField.Properties\n\n            For i As Integer = 0 To fldProperties.Count - 1\n\n                Dim fldPropertyName = fldProperties(i).Name ' Fails on this line\n                If fldPropertyName = checkPropertyName.ToUpper Then\n                    propertyExists = True\n                    Exit For\n                End If\n\n            Next i\n\n</code></pre>\n\nDisposeObjects:<br />\n<pre><code>            ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n        Catch ex As Exception\n            Dim msg = innerExceptionMessage(ex)\n            propertyExists = False\n\n        Finally\n            ' DisposeObjects (in Reverse Order)\n            If Not IsNothing(fldProperty) AndAlso Not fldProperty.IsDisposed Then\n                fldProperty.Dispose()\n            End If\n            If Not IsNothing(fldProperties) AndAlso Not fldProperties.IsDisposed Then\n                fldProperties.Dispose()\n            End If\n\n        End Try\n\n        Return propertyExists\n\n    End Function</code></pre>\n\n",
    "PostedDate": "2015-03-12T02:42:55.627-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1362807",
    "ThreadId": "586132",
    "Html": "Looks like ExcelApi.dll is not referenced (but note sure it has to be).\r<br />\n<br />\nI need some more infos.\r<br />\n<br />\n1) NetOffice version\r<br />\n2) Application Type, External Program or Addin( if addin which host application?)\r<br />\n3) Full qualified type name of your argument checkField (need info which is come from)\r<br />\n<br />\nI want checkout the COM interface id's of Excel.Property and DAO.Property.\r<br />\n(may its the same id's, this is forbidden in COM but sometimes Microsoft goes crazy)\r<br />\n<br />\nSebastian<br />\n",
    "PostedDate": "2015-03-12T06:49:13.67-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1363068",
    "ThreadId": "586132",
    "Html": "Hi Sebastian,\r<br />\n<br />\nThanks for your prompt reply.\r<br />\n<br />\nThe NetOffice.ExcelApi is not referenced in the Access Project (I was confused when it came up with Excel and not Access as an Error)\r<br />\n<br />\n1) NetOffice Version for NetOffice .Core,  NetOffice .Access and  NetOffice .Excel is 1.7.2.0\r<br />\n2) Application type is an external program. WPF UI calling set of NetOffice Access Functions (as per code snippets) or Excel Functions\r<br />\n3.) checkField source is as per following code: <br />\n<pre><code> tdf =&gt; tdf.fields =&gt; fld.Type=4 =&gt; SetFieldProperty =&gt; HasFieldProperty\n</code></pre>\n\nPleased to send a sample project if that makes things easier.\r<br />\n<br />\nHave great day.\r<br />\n<br />\nCheers,\r<br />\n<br />\nGordon.\r<br />\n<br />\nCode for checkField source:<br />\n<h1>Region &quot;Field Properties&quot;</h1>\n<pre><code>    Private Function SetLongFieldProperties(ByRef tdf As TableDef) As Boolean\n\n        ' Property Attributes\n        Dim propertyName As String = Nothing\n        Dim propertyDataType As NetOffice.DAOApi.Enums.DataTypeEnum = Nothing\n        Dim propertyValue As Object = Nothing\n\n        ' Get the fields from the TableDef\n        Dim fld As Field = Nothing\n        Dim flds As Fields = tdf.Fields\n\n        Dim result As Boolean = False\n\n        Try\n            For Each fld In flds\n\n                Dim fldType = fld.Type\n\n                Select Case fldType\n\n                    Case 4\n\n                        ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n                        ' Long Formatting\n                        ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n                        propertyName = &quot;Format&quot;\n                        propertyDataType = NetOffice.DAOApi.Enums.DataTypeEnum.dbText\n                        propertyValue = &quot;Standard&quot;\n\n                        SetFieldProperty(fld, propertyName, propertyDataType, propertyValue)\n                        ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n                        propertyName = &quot;DecimalPlaces&quot;\n                        propertyDataType = NetOffice.DAOApi.Enums.DataTypeEnum.dbByte\n                        propertyValue = 0\n\n                        SetFieldProperty(fld, propertyName, propertyDataType, propertyValue)\n                        ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n                        propertyName = &quot;ColumnWidth&quot;\n                        propertyDataType = NetOffice.DAOApi.Enums.DataTypeEnum.dbInteger\n                        propertyValue = 1200\n\n                        SetFieldProperty(fld, propertyName, propertyDataType, propertyValue)\n\n\n                End Select\n\n            Next fld\n\n            result = True\n\n</code></pre>\n\nDisposeObjects:<br />\n<pre><code>            ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n        Catch ex As Exception\n            Dim msg = innerExceptionMessage(ex)\n            result = False\n\n        Finally\n            ' DisposeObjects (in Reverse Order)\n            If Not IsNothing(fld) AndAlso Not fld.IsDisposed Then\n                fld.Dispose()\n            End If\n            If Not IsNothing(flds) AndAlso Not flds.IsDisposed Then\n                flds.Dispose()\n            End If\n\n        End Try\n\n\n        Return True\n\n    End Function\n\n    Private Function SetFieldProperty(ByRef fieldToSet As Field,\n                                      ByVal propertyName As String,\n                                      ByVal propertyDataType As NetOffice.DAOApi.Enums.DataTypeEnum,\n                                      ByVal propertySetValue As Object) As Boolean\n\n        ' Attempt to Set SetFieldProperty\n        Dim fieldPropertySet As Boolean = False\n\n        Try\n            If HasFieldProperty(fieldToSet, propertyName) Then\n                fieldToSet.Properties(propertyName).Value = propertySetValue\n            Else\n                fieldToSet.Properties.Append(fieldToSet.CreateProperty(propertyName, propertyDataType, propertySetValue))\n            End If\n\n            fieldPropertySet = True\n</code></pre>\n\nDisposeObjects:<br />\n<pre><code>            ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n        Catch ex As Exception\n            Dim msg = innerExceptionMessage(ex)\n            fieldPropertySet = False\n\n        Finally\n            ' DisposeObjects (in Reverse Order)\n\n        End Try\n\n        Return fieldPropertySet\n\n    End Function\n\n    Private Function HasFieldProperty(ByRef checkField As Field,\n                                      ByVal checkPropertyName As String) As Boolean\n\n        ' Determine if the fieldToCheck has the 'Property Name' (eg: Format, Input Mask,....)\n        Dim fldName = checkField.Name\n\n        ' Check if PropertyName Exists\n        Dim propertyExists As Boolean = False\n\n        Dim fldProperty As NetOffice.DAOApi.Property = Nothing\n        Dim fldProperties As NetOffice.DAOApi.Properties = Nothing\n\n        Try\n            fldProperties = checkField.Properties\n\n            For i As Integer = 0 To fldProperties.Count - 1\n\n                Dim fldPropertyName = fldProperties(i).Name\n                If fldPropertyName = checkPropertyName.ToUpper Then\n                    propertyExists = True\n                    Exit For\n                End If\n\n            Next i\n\n</code></pre>\n\nDisposeObjects:<br />\n<pre><code>            ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n        Catch ex As Exception\n            Dim msg = innerExceptionMessage(ex)\n            propertyExists = False\n\n        Finally\n            ' DisposeObjects (in Reverse Order)\n            If Not IsNothing(fldProperty) AndAlso Not fldProperty.IsDisposed Then\n                fldProperty.Dispose()\n            End If\n            If Not IsNothing(fldProperties) AndAlso Not fldProperties.IsDisposed Then\n                fldProperties.Dispose()\n            End If\n\n        End Try\n\n        Return propertyExists\n\n    End Function</code></pre>\n\n",
    "PostedDate": "2015-03-13T03:00:02.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1363239",
    "ThreadId": "586132",
    "Html": "A sample project is greatly appreciated. \r<br />\n<br />\nplease send to:\r<br />\npublic.sebastian[at]web.de\r<br />\n<br />\n(i need a mdb/accdb file or/and instructions how i can reproduce the exception)\r<br />\n<br />\nBTW: Excel doesnt contains a type called &quot;property&quot; :o this is very strange.\r<br />\ni find ICustomProperty and CustomProperty only in my personal type lib analyzer tool.\r<br />\n(what i know currently: NetOffice failed to detect the correct type library which a single property instance type comes from. \r<br />\ni still believe on my duplicate interface id theory....)\r<br />\n<br />\nlets pin point/fix this asap !\r<br />\n<br />\n*Sebastian<br />\n",
    "PostedDate": "2015-03-13T11:59:51.047-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]